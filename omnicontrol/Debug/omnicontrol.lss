
omnicontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000c62  00000cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010c  0080010c  00000d02  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d02  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000529  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000245  00000000  00000000  000012bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031e  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001820  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031c  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000045e  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000205a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DCMotorStop>:
  a6:	10 92 b4 00 	sts	0x00B4, r1
  aa:	18 bc       	out	0x28, r1	; 40
  ac:	17 bc       	out	0x27, r1	; 39
  ae:	08 95       	ret

000000b0 <DCMotorSetup>:
  b0:	84 b5       	in	r24, 0x24	; 36
  b2:	83 6a       	ori	r24, 0xA3	; 163
  b4:	84 bd       	out	0x24, r24	; 36
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	85 bd       	out	0x25, r24	; 37
  bc:	e0 eb       	ldi	r30, 0xB0	; 176
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	83 62       	ori	r24, 0x23	; 35
  c4:	80 83       	st	Z, r24
  c6:	e1 eb       	ldi	r30, 0xB1	; 177
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	88 6f       	ori	r24, 0xF8	; 248
  d4:	8a b9       	out	0x0a, r24	; 10
  d6:	20 9a       	sbi	0x04, 0	; 4
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <DCMotorStop>
  dc:	08 95       	ret

000000de <Timer1Init>:
}

void Timer1Init(void) {
	// Setup Timer/Counter1 in normal mode with prescaler of 8
	// At F_CPU = 16MHz, F_TIMER1 = 2MHz, and T_TIMER1 = 0.5 us
	TCCR1B |= (1 << CS11);
  de:	e1 e8       	ldi	r30, 0x81	; 129
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <shiftByteOut>:

void shiftByteOut(uint8_t byteOut)
{
	// Clear shift register pins
	// DATA = PD0, LATCH = PD1, CLK = PD2
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2));
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	98 7f       	andi	r25, 0xF8	; 248
  ee:	9b b9       	out	0x0b, r25	; 11
	
	// Shift out serial data
	for(int i = 0; i < 8; i++)
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
	{
		// Sets data high if bit i is 1
		if(byteOut & (1 << i))
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	ac 01       	movw	r20, r24
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <shiftByteOut+0x16>
  fc:	55 95       	asr	r21
  fe:	47 95       	ror	r20
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <shiftByteOut+0x12>
 104:	40 fd       	sbrc	r20, 0
		PORTD |= (1 << PORTD0);		// data high
 106:	58 9a       	sbi	0x0b, 0	; 11
		
		PORTD |= (1 << PORTD2);		// clock high
 108:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(1 << PORTD2);	// clock low
 10a:	5a 98       	cbi	0x0b, 2	; 11
		
		PORTD &= ~(1 << PORTD0);	// data low
 10c:	58 98       	cbi	0x0b, 0	; 11
	// Clear shift register pins
	// DATA = PD0, LATCH = PD1, CLK = PD2
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2));
	
	// Shift out serial data
	for(int i = 0; i < 8; i++)
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	28 30       	cpi	r18, 0x08	; 8
 114:	31 05       	cpc	r19, r1
 116:	79 f7       	brne	.-34     	; 0xf6 <shiftByteOut+0xc>
		
		PORTD &= ~(1 << PORTD0);	// data low
	}
	
	// Display by latching to output pins
	PORTD |= (1 << PORTD1);			// latch high
 118:	59 9a       	sbi	0x0b, 1	; 11
	PORTD &= ~(1 << PORTD1);		// latch low
 11a:	59 98       	cbi	0x0b, 1	; 11
 11c:	08 95       	ret

0000011e <main>:

// Function prototypes
void Timer1Init(void);
void shiftByteOut(uint8_t byteOut);

int main(void) {	
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	27 97       	sbiw	r28, 0x07	; 7
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << PORTB1);	// Laser output pin, HIGH = laser on
 132:	21 9a       	sbi	0x04, 1	; 4
	DDRD |= (1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2);	// Enable pins for shift register output
 134:	8a b1       	in	r24, 0x0a	; 10
 136:	87 60       	ori	r24, 0x07	; 7
 138:	8a b9       	out	0x0a, r24	; 10
	
	uint8_t laserState = 0;		// 1 = ON, 0 = OFF
	uint16_t laserTimer = 0;	// 
	uint8_t laserPower = 0;		// 0 = can't fire, 1 = can fire

	DCMotorSetup();
 13a:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMotorSetup>
	Timer1Init();
 13e:	0e 94 6f 00 	call	0xde	; 0xde <Timer1Init>
	
	// Enable external pin change interrupt 1 (PCINT1) for all 6 RC channels
	PCICR |= (1 << PCIE1);
 142:	e8 e6       	ldi	r30, 0x68	; 104
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11) | (1 << PCINT12) | (1 << PCINT13);
 14c:	ec e6       	ldi	r30, 0x6C	; 108
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8f 63       	ori	r24, 0x3F	; 63
 154:	80 83       	st	Z, r24
	sei();		// Set the Global Interrupt Enable flag so that interrupts can be processed
 156:	78 94       	sei
	uint8_t ledBarIndicator = 1;
	uint8_t ledBarCycle = 1;
	
	uint8_t laserState = 0;		// 1 = ON, 0 = OFF
	uint16_t laserTimer = 0;	// 
	uint8_t laserPower = 0;		// 0 = can't fire, 1 = can fire
 158:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t ledBarCounter = 1;
	uint8_t ledBarIndicator = 1;
	uint8_t ledBarCycle = 1;
	
	uint8_t laserState = 0;		// 1 = ON, 0 = OFF
	uint16_t laserTimer = 0;	// 
 15a:	1a 82       	std	Y+2, r1	; 0x02
 15c:	19 82       	std	Y+1, r1	; 0x01
	// Laser LED bar variables
	uint16_t ledBarCounter = 1;
	uint8_t ledBarIndicator = 1;
	uint8_t ledBarCycle = 1;
	
	uint8_t laserState = 0;		// 1 = ON, 0 = OFF
 15e:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t ledDisplay = 0b00000001;*/
	
	// Laser LED bar variables
	uint16_t ledBarCounter = 1;
	uint8_t ledBarIndicator = 1;
	uint8_t ledBarCycle = 1;
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	2b 83       	std	Y+3, r18	; 0x03
	int8_t ledIncrement = -1;
	uint8_t ledDisplay = 0b00000001;*/
	
	// Laser LED bar variables
	uint16_t ledBarCounter = 1;
	uint8_t ledBarIndicator = 1;
 164:	22 24       	eor	r2, r2
 166:	23 94       	inc	r2
	uint8_t ledPosition = 0;
	int8_t ledIncrement = -1;
	uint8_t ledDisplay = 0b00000001;*/
	
	// Laser LED bar variables
	uint16_t ledBarCounter = 1;
 168:	01 e0       	ldi	r16, 0x01	; 1
 16a:	10 e0       	ldi	r17, 0x00	; 0
				ledBarIndicator = 1;
				laserTimer = LASERWAIT;
				laserPower = 0;
			} else if(ch5 < 1500) {
				PORTB &= ~(1 << PORTB1); // Turn off laser
				laserState = 0;
 16c:	31 2c       	mov	r3, r1
	sei();		// Set the Global Interrupt Enable flag so that interrupts can be processed
	
	// Main loop
	while(1) {		
		// Only update motor speeds after each full cycle of RC pulses
		if(start_flag == 1) {
 16e:	80 91 0c 01 	lds	r24, 0x010C
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x50>
			// Calculate velocity vector from channels 1 and 2
			// Channel 1 = vx, Channel 2 = vy
			ch1 = ch1 - 1500;	// Center at 0, in range [-500, +500]
 176:	80 91 0a 01 	lds	r24, 0x010A
 17a:	90 91 0b 01 	lds	r25, 0x010B
 17e:	8c 5d       	subi	r24, 0xDC	; 220
 180:	95 40       	sbci	r25, 0x05	; 5
 182:	90 93 0b 01 	sts	0x010B, r25
 186:	80 93 0a 01 	sts	0x010A, r24
			ch2 = ch2 - 1500;
 18a:	80 91 08 01 	lds	r24, 0x0108
 18e:	90 91 09 01 	lds	r25, 0x0109
 192:	8c 5d       	subi	r24, 0xDC	; 220
 194:	95 40       	sbci	r25, 0x05	; 5
 196:	90 93 09 01 	sts	0x0109, r25
 19a:	80 93 08 01 	sts	0x0108, r24
			ch4 = ch4 - 1500;
 19e:	80 91 04 01 	lds	r24, 0x0104
 1a2:	90 91 05 01 	lds	r25, 0x0105
 1a6:	8c 5d       	subi	r24, 0xDC	; 220
 1a8:	95 40       	sbci	r25, 0x05	; 5
 1aa:	90 93 05 01 	sts	0x0105, r25
 1ae:	80 93 04 01 	sts	0x0104, r24
		
			if(ch1 < -500) {
 1b2:	80 91 0a 01 	lds	r24, 0x010A
 1b6:	90 91 0b 01 	lds	r25, 0x010B
 1ba:	8c 30       	cpi	r24, 0x0C	; 12
 1bc:	9e 4f       	sbci	r25, 0xFE	; 254
 1be:	3c f4       	brge	.+14     	; 0x1ce <main+0xb0>
				ch1 = -500;
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	9e ef       	ldi	r25, 0xFE	; 254
 1c4:	90 93 0b 01 	sts	0x010B, r25
 1c8:	80 93 0a 01 	sts	0x010A, r24
 1cc:	0d c0       	rjmp	.+26     	; 0x1e8 <main+0xca>
			} else if(ch1 > 500){
 1ce:	80 91 0a 01 	lds	r24, 0x010A
 1d2:	90 91 0b 01 	lds	r25, 0x010B
 1d6:	85 3f       	cpi	r24, 0xF5	; 245
 1d8:	91 40       	sbci	r25, 0x01	; 1
 1da:	34 f0       	brlt	.+12     	; 0x1e8 <main+0xca>
				ch1 = 500;
 1dc:	24 ef       	ldi	r18, 0xF4	; 244
 1de:	31 e0       	ldi	r19, 0x01	; 1
 1e0:	30 93 0b 01 	sts	0x010B, r19
 1e4:	20 93 0a 01 	sts	0x010A, r18
			}
			if(ch2 < -500) {
 1e8:	80 91 08 01 	lds	r24, 0x0108
 1ec:	90 91 09 01 	lds	r25, 0x0109
 1f0:	8c 30       	cpi	r24, 0x0C	; 12
 1f2:	9e 4f       	sbci	r25, 0xFE	; 254
 1f4:	3c f4       	brge	.+14     	; 0x204 <main+0xe6>
				ch2 = -500;
 1f6:	8c e0       	ldi	r24, 0x0C	; 12
 1f8:	9e ef       	ldi	r25, 0xFE	; 254
 1fa:	90 93 09 01 	sts	0x0109, r25
 1fe:	80 93 08 01 	sts	0x0108, r24
 202:	0d c0       	rjmp	.+26     	; 0x21e <main+0x100>
			} else if(ch2 > 500){
 204:	80 91 08 01 	lds	r24, 0x0108
 208:	90 91 09 01 	lds	r25, 0x0109
 20c:	85 3f       	cpi	r24, 0xF5	; 245
 20e:	91 40       	sbci	r25, 0x01	; 1
 210:	34 f0       	brlt	.+12     	; 0x21e <main+0x100>
				ch2 = 500;
 212:	24 ef       	ldi	r18, 0xF4	; 244
 214:	31 e0       	ldi	r19, 0x01	; 1
 216:	30 93 09 01 	sts	0x0109, r19
 21a:	20 93 08 01 	sts	0x0108, r18
			}
			if(ch4 < -500) {
 21e:	80 91 04 01 	lds	r24, 0x0104
 222:	90 91 05 01 	lds	r25, 0x0105
 226:	8c 30       	cpi	r24, 0x0C	; 12
 228:	9e 4f       	sbci	r25, 0xFE	; 254
 22a:	3c f4       	brge	.+14     	; 0x23a <main+0x11c>
				ch4 = -500;
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	9e ef       	ldi	r25, 0xFE	; 254
 230:	90 93 05 01 	sts	0x0105, r25
 234:	80 93 04 01 	sts	0x0104, r24
 238:	0d c0       	rjmp	.+26     	; 0x254 <main+0x136>
			} else if(ch4 > 500){
 23a:	80 91 04 01 	lds	r24, 0x0104
 23e:	90 91 05 01 	lds	r25, 0x0105
 242:	85 3f       	cpi	r24, 0xF5	; 245
 244:	91 40       	sbci	r25, 0x01	; 1
 246:	34 f0       	brlt	.+12     	; 0x254 <main+0x136>
				ch4 = 500;
 248:	24 ef       	ldi	r18, 0xF4	; 244
 24a:	31 e0       	ldi	r19, 0x01	; 1
 24c:	30 93 05 01 	sts	0x0105, r19
 250:	20 93 04 01 	sts	0x0104, r18
			}
		
			float sqrt3_2 = sqrt(3.0)/2.0;
		
			// Check for a dead stick position
			if((abs(ch1) > 25) || (abs(ch2) > 25) || (abs(ch4) > 25)) {
 254:	80 91 0a 01 	lds	r24, 0x010A
 258:	90 91 0b 01 	lds	r25, 0x010B
 25c:	99 23       	and	r25, r25
 25e:	1c f4       	brge	.+6      	; 0x266 <main+0x148>
 260:	91 95       	neg	r25
 262:	81 95       	neg	r24
 264:	91 09       	sbc	r25, r1
 266:	4a 97       	sbiw	r24, 0x1a	; 26
 268:	bc f4       	brge	.+46     	; 0x298 <main+0x17a>
 26a:	80 91 08 01 	lds	r24, 0x0108
 26e:	90 91 09 01 	lds	r25, 0x0109
 272:	99 23       	and	r25, r25
 274:	1c f4       	brge	.+6      	; 0x27c <main+0x15e>
 276:	91 95       	neg	r25
 278:	81 95       	neg	r24
 27a:	91 09       	sbc	r25, r1
 27c:	4a 97       	sbiw	r24, 0x1a	; 26
 27e:	64 f4       	brge	.+24     	; 0x298 <main+0x17a>
 280:	80 91 04 01 	lds	r24, 0x0104
 284:	90 91 05 01 	lds	r25, 0x0105
 288:	99 23       	and	r25, r25
 28a:	1c f4       	brge	.+6      	; 0x292 <main+0x174>
 28c:	91 95       	neg	r25
 28e:	81 95       	neg	r24
 290:	91 09       	sbc	r25, r1
 292:	4a 97       	sbiw	r24, 0x1a	; 26
 294:	0c f4       	brge	.+2      	; 0x298 <main+0x17a>
 296:	43 c1       	rjmp	.+646    	; 0x51e <main+0x400>
				// Calculate raw wheel speeds and directions for translation
				float rawSpeed_A = -ch1;
 298:	60 91 0a 01 	lds	r22, 0x010A
 29c:	70 91 0b 01 	lds	r23, 0x010B
 2a0:	71 95       	neg	r23
 2a2:	61 95       	neg	r22
 2a4:	71 09       	sbc	r23, r1
 2a6:	88 27       	eor	r24, r24
 2a8:	77 fd       	sbrc	r23, 7
 2aa:	80 95       	com	r24
 2ac:	98 2f       	mov	r25, r24
 2ae:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatsisf>
 2b2:	2b 01       	movw	r4, r22
 2b4:	3c 01       	movw	r6, r24
				float rawSpeed_B = 0.5*ch1 + sqrt3_2*ch2;
 2b6:	60 91 0a 01 	lds	r22, 0x010A
 2ba:	70 91 0b 01 	lds	r23, 0x010B
 2be:	a0 90 08 01 	lds	r10, 0x0108
 2c2:	b0 90 09 01 	lds	r11, 0x0109
 2c6:	88 27       	eor	r24, r24
 2c8:	77 fd       	sbrc	r23, 7
 2ca:	80 95       	com	r24
 2cc:	98 2f       	mov	r25, r24
 2ce:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatsisf>
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	5f e3       	ldi	r21, 0x3F	; 63
 2da:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 2de:	6b 01       	movw	r12, r22
 2e0:	7c 01       	movw	r14, r24
 2e2:	b5 01       	movw	r22, r10
 2e4:	88 27       	eor	r24, r24
 2e6:	77 fd       	sbrc	r23, 7
 2e8:	80 95       	com	r24
 2ea:	98 2f       	mov	r25, r24
 2ec:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatsisf>
 2f0:	27 ed       	ldi	r18, 0xD7	; 215
 2f2:	33 eb       	ldi	r19, 0xB3	; 179
 2f4:	4d e5       	ldi	r20, 0x5D	; 93
 2f6:	5f e3       	ldi	r21, 0x3F	; 63
 2f8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 2fc:	9b 01       	movw	r18, r22
 2fe:	ac 01       	movw	r20, r24
 300:	c7 01       	movw	r24, r14
 302:	b6 01       	movw	r22, r12
 304:	0e 94 06 04 	call	0x80c	; 0x80c <__addsf3>
 308:	4b 01       	movw	r8, r22
 30a:	5c 01       	movw	r10, r24
				float rawSpeed_C = 0.5*ch1 - sqrt3_2*ch2;
 30c:	60 91 0a 01 	lds	r22, 0x010A
 310:	70 91 0b 01 	lds	r23, 0x010B
 314:	80 91 08 01 	lds	r24, 0x0108
 318:	90 91 09 01 	lds	r25, 0x0109
 31c:	9f 83       	std	Y+7, r25	; 0x07
 31e:	8e 83       	std	Y+6, r24	; 0x06
 320:	88 27       	eor	r24, r24
 322:	77 fd       	sbrc	r23, 7
 324:	80 95       	com	r24
 326:	98 2f       	mov	r25, r24
 328:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatsisf>
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	5f e3       	ldi	r21, 0x3F	; 63
 334:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 338:	6b 01       	movw	r12, r22
 33a:	7c 01       	movw	r14, r24
 33c:	ee 81       	ldd	r30, Y+6	; 0x06
 33e:	ff 81       	ldd	r31, Y+7	; 0x07
 340:	bf 01       	movw	r22, r30
 342:	88 27       	eor	r24, r24
 344:	77 fd       	sbrc	r23, 7
 346:	80 95       	com	r24
 348:	98 2f       	mov	r25, r24
 34a:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatsisf>
 34e:	27 ed       	ldi	r18, 0xD7	; 215
 350:	33 eb       	ldi	r19, 0xB3	; 179
 352:	4d e5       	ldi	r20, 0x5D	; 93
 354:	5f e3       	ldi	r21, 0x3F	; 63
 356:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 35a:	9b 01       	movw	r18, r22
 35c:	ac 01       	movw	r20, r24
 35e:	c7 01       	movw	r24, r14
 360:	b6 01       	movw	r22, r12
 362:	0e 94 05 04 	call	0x80a	; 0x80a <__subsf3>
 366:	6b 01       	movw	r12, r22
 368:	7c 01       	movw	r14, r24
			
				// Add in rotation
				if(abs(ch4) > 25) {
 36a:	80 91 04 01 	lds	r24, 0x0104
 36e:	90 91 05 01 	lds	r25, 0x0105
 372:	99 23       	and	r25, r25
 374:	1c f4       	brge	.+6      	; 0x37c <main+0x25e>
 376:	91 95       	neg	r25
 378:	81 95       	neg	r24
 37a:	91 09       	sbc	r25, r1
 37c:	4a 97       	sbiw	r24, 0x1a	; 26
 37e:	b4 f1       	brlt	.+108    	; 0x3ec <main+0x2ce>
					rawSpeed_A = rawSpeed_A - ch4;
 380:	60 91 04 01 	lds	r22, 0x0104
 384:	70 91 05 01 	lds	r23, 0x0105
 388:	88 27       	eor	r24, r24
 38a:	77 fd       	sbrc	r23, 7
 38c:	80 95       	com	r24
 38e:	98 2f       	mov	r25, r24
 390:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatsisf>
 394:	9b 01       	movw	r18, r22
 396:	ac 01       	movw	r20, r24
 398:	c3 01       	movw	r24, r6
 39a:	b2 01       	movw	r22, r4
 39c:	0e 94 05 04 	call	0x80a	; 0x80a <__subsf3>
 3a0:	2b 01       	movw	r4, r22
 3a2:	3c 01       	movw	r6, r24
					rawSpeed_B = rawSpeed_B - ch4;
 3a4:	60 91 04 01 	lds	r22, 0x0104
 3a8:	70 91 05 01 	lds	r23, 0x0105
 3ac:	88 27       	eor	r24, r24
 3ae:	77 fd       	sbrc	r23, 7
 3b0:	80 95       	com	r24
 3b2:	98 2f       	mov	r25, r24
 3b4:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatsisf>
 3b8:	9b 01       	movw	r18, r22
 3ba:	ac 01       	movw	r20, r24
 3bc:	c5 01       	movw	r24, r10
 3be:	b4 01       	movw	r22, r8
 3c0:	0e 94 05 04 	call	0x80a	; 0x80a <__subsf3>
 3c4:	4b 01       	movw	r8, r22
 3c6:	5c 01       	movw	r10, r24
					rawSpeed_C = rawSpeed_C - ch4;
 3c8:	60 91 04 01 	lds	r22, 0x0104
 3cc:	70 91 05 01 	lds	r23, 0x0105
 3d0:	88 27       	eor	r24, r24
 3d2:	77 fd       	sbrc	r23, 7
 3d4:	80 95       	com	r24
 3d6:	98 2f       	mov	r25, r24
 3d8:	0e 94 09 05 	call	0xa12	; 0xa12 <__floatsisf>
 3dc:	9b 01       	movw	r18, r22
 3de:	ac 01       	movw	r20, r24
 3e0:	c7 01       	movw	r24, r14
 3e2:	b6 01       	movw	r22, r12
 3e4:	0e 94 05 04 	call	0x80a	; 0x80a <__subsf3>
 3e8:	6b 01       	movw	r12, r22
 3ea:	7c 01       	movw	r14, r24
				}
			
				// Set motor directions
				if(rawSpeed_A < 0) {
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	a9 01       	movw	r20, r18
 3f2:	c3 01       	movw	r24, r6
 3f4:	b2 01       	movw	r22, r4
 3f6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__cmpsf2>
 3fa:	88 23       	and	r24, r24
 3fc:	14 f4       	brge	.+4      	; 0x402 <main+0x2e4>
					MotorA_CCW();
 3fe:	5c 98       	cbi	0x0b, 4	; 11
 400:	01 c0       	rjmp	.+2      	; 0x404 <main+0x2e6>
				} else MotorA_CW();
 402:	5c 9a       	sbi	0x0b, 4	; 11
		
				if(rawSpeed_B < 0) {
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	a9 01       	movw	r20, r18
 40a:	c5 01       	movw	r24, r10
 40c:	b4 01       	movw	r22, r8
 40e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__cmpsf2>
 412:	88 23       	and	r24, r24
 414:	14 f4       	brge	.+4      	; 0x41a <main+0x2fc>
					MotorB_CCW();
 416:	28 98       	cbi	0x05, 0	; 5
 418:	01 c0       	rjmp	.+2      	; 0x41c <main+0x2fe>
				} else MotorB_CW();
 41a:	28 9a       	sbi	0x05, 0	; 5
		
				if(rawSpeed_C < 0) {
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	a9 01       	movw	r20, r18
 422:	c7 01       	movw	r24, r14
 424:	b6 01       	movw	r22, r12
 426:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__cmpsf2>
 42a:	88 23       	and	r24, r24
 42c:	14 f4       	brge	.+4      	; 0x432 <main+0x314>
					MotorC_CCW();
 42e:	5f 98       	cbi	0x0b, 7	; 11
 430:	01 c0       	rjmp	.+2      	; 0x434 <main+0x316>
				} else MotorC_CW();
 432:	5f 9a       	sbi	0x0b, 7	; 11
			
				rawSpeed_A = fabs(rawSpeed_A);
 434:	e8 94       	clt
 436:	77 f8       	bld	r7, 7
				rawSpeed_B = fabs(rawSpeed_B);
 438:	e8 94       	clt
 43a:	b7 f8       	bld	r11, 7
				rawSpeed_C = fabs(rawSpeed_C);
 43c:	e8 94       	clt
 43e:	f7 f8       	bld	r15, 7
			
				if(rawSpeed_A > 500) {
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	4a ef       	ldi	r20, 0xFA	; 250
 446:	53 e4       	ldi	r21, 0x43	; 67
 448:	c3 01       	movw	r24, r6
 44a:	b2 01       	movw	r22, r4
 44c:	0e 94 b9 05 	call	0xb72	; 0xb72 <__gesf2>
 450:	18 16       	cp	r1, r24
 452:	44 f4       	brge	.+16     	; 0x464 <main+0x346>
					rawSpeed_A = 500;
 454:	0f 2e       	mov	r0, r31
 456:	41 2c       	mov	r4, r1
 458:	51 2c       	mov	r5, r1
 45a:	fa ef       	ldi	r31, 0xFA	; 250
 45c:	6f 2e       	mov	r6, r31
 45e:	f3 e4       	ldi	r31, 0x43	; 67
 460:	7f 2e       	mov	r7, r31
 462:	f0 2d       	mov	r31, r0
				}
				if(rawSpeed_B > 500) {
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	4a ef       	ldi	r20, 0xFA	; 250
 46a:	53 e4       	ldi	r21, 0x43	; 67
 46c:	c5 01       	movw	r24, r10
 46e:	b4 01       	movw	r22, r8
 470:	0e 94 b9 05 	call	0xb72	; 0xb72 <__gesf2>
 474:	18 16       	cp	r1, r24
 476:	44 f4       	brge	.+16     	; 0x488 <main+0x36a>
					rawSpeed_B = 500;
 478:	0f 2e       	mov	r0, r31
 47a:	81 2c       	mov	r8, r1
 47c:	91 2c       	mov	r9, r1
 47e:	fa ef       	ldi	r31, 0xFA	; 250
 480:	af 2e       	mov	r10, r31
 482:	f3 e4       	ldi	r31, 0x43	; 67
 484:	bf 2e       	mov	r11, r31
 486:	f0 2d       	mov	r31, r0
				}
				if(rawSpeed_C > 500) {
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	4a ef       	ldi	r20, 0xFA	; 250
 48e:	53 e4       	ldi	r21, 0x43	; 67
 490:	c7 01       	movw	r24, r14
 492:	b6 01       	movw	r22, r12
 494:	0e 94 b9 05 	call	0xb72	; 0xb72 <__gesf2>
 498:	18 16       	cp	r1, r24
 49a:	44 f4       	brge	.+16     	; 0x4ac <main+0x38e>
					rawSpeed_C = 500;
 49c:	0f 2e       	mov	r0, r31
 49e:	c1 2c       	mov	r12, r1
 4a0:	d1 2c       	mov	r13, r1
 4a2:	fa ef       	ldi	r31, 0xFA	; 250
 4a4:	ef 2e       	mov	r14, r31
 4a6:	f3 e4       	ldi	r31, 0x43	; 67
 4a8:	ff 2e       	mov	r15, r31
 4aa:	f0 2d       	mov	r31, r0
				}
		
				// Set motor speeds
				// Map from [0,500] to [155,255]
				SPEED_A = 155 + (int)(rawSpeed_A*100/500);
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	48 ec       	ldi	r20, 0xC8	; 200
 4b2:	52 e4       	ldi	r21, 0x42	; 66
 4b4:	c3 01       	movw	r24, r6
 4b6:	b2 01       	movw	r22, r4
 4b8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	4a ef       	ldi	r20, 0xFA	; 250
 4c2:	53 e4       	ldi	r21, 0x43	; 67
 4c4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divsf3>
 4c8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixsfsi>
 4cc:	65 56       	subi	r22, 0x65	; 101
 4ce:	e4 eb       	ldi	r30, 0xB4	; 180
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	60 83       	st	Z, r22
				SPEED_B = 155 + (int)(rawSpeed_B*100/500);
 4d4:	20 e0       	ldi	r18, 0x00	; 0
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	48 ec       	ldi	r20, 0xC8	; 200
 4da:	52 e4       	ldi	r21, 0x42	; 66
 4dc:	c5 01       	movw	r24, r10
 4de:	b4 01       	movw	r22, r8
 4e0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	4a ef       	ldi	r20, 0xFA	; 250
 4ea:	53 e4       	ldi	r21, 0x43	; 67
 4ec:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divsf3>
 4f0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixsfsi>
 4f4:	65 56       	subi	r22, 0x65	; 101
 4f6:	68 bd       	out	0x28, r22	; 40
				SPEED_C = 155 + (int)(rawSpeed_C*100/500);
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	48 ec       	ldi	r20, 0xC8	; 200
 4fe:	52 e4       	ldi	r21, 0x42	; 66
 500:	c7 01       	movw	r24, r14
 502:	b6 01       	movw	r22, r12
 504:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__mulsf3>
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	4a ef       	ldi	r20, 0xFA	; 250
 50e:	53 e4       	ldi	r21, 0x43	; 67
 510:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__divsf3>
 514:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fixsfsi>
 518:	65 56       	subi	r22, 0x65	; 101
 51a:	67 bd       	out	0x27, r22	; 39
			}
		
			float sqrt3_2 = sqrt(3.0)/2.0;
		
			// Check for a dead stick position
			if((abs(ch1) > 25) || (abs(ch2) > 25) || (abs(ch4) > 25)) {
 51c:	02 c0       	rjmp	.+4      	; 0x522 <main+0x404>
				SPEED_A = 155 + (int)(rawSpeed_A*100/500);
				SPEED_B = 155 + (int)(rawSpeed_B*100/500);
				SPEED_C = 155 + (int)(rawSpeed_C*100/500);
			
			} else {
				DCMotorStop();
 51e:	0e 94 53 00 	call	0xa6	; 0xa6 <DCMotorStop>
			}
			
			// Turn laser on (Ch5 > 1500) or off (Ch5 < 1500)
			if((ch5 > 1500) && (laserState == 0) && (laserTimer == 0) && (laserPower == 1)) {
 522:	80 91 02 01 	lds	r24, 0x0102
 526:	90 91 03 01 	lds	r25, 0x0103
 52a:	8d 3d       	cpi	r24, 0xDD	; 221
 52c:	95 40       	sbci	r25, 0x05	; 5
 52e:	c4 f0       	brlt	.+48     	; 0x560 <main+0x442>
 530:	2c 81       	ldd	r18, Y+4	; 0x04
 532:	21 11       	cpse	r18, r1
 534:	15 c0       	rjmp	.+42     	; 0x560 <main+0x442>
 536:	89 81       	ldd	r24, Y+1	; 0x01
 538:	9a 81       	ldd	r25, Y+2	; 0x02
 53a:	89 2b       	or	r24, r25
 53c:	89 f4       	brne	.+34     	; 0x560 <main+0x442>
 53e:	9d 81       	ldd	r25, Y+5	; 0x05
 540:	91 30       	cpi	r25, 0x01	; 1
 542:	71 f4       	brne	.+28     	; 0x560 <main+0x442>
				PORTB |= (1 << PORTB1);
 544:	29 9a       	sbi	0x05, 1	; 5
				laserState = 1;
				ledBarCounter = 1;	// Reset LED bar
				ledBarCycle = 1;
				ledBarIndicator = 1;
				laserTimer = LASERWAIT;
				laserPower = 0;
 546:	3d 82       	std	Y+5, r3	; 0x05
				PORTB |= (1 << PORTB1);
				laserState = 1;
				ledBarCounter = 1;	// Reset LED bar
				ledBarCycle = 1;
				ledBarIndicator = 1;
				laserTimer = LASERWAIT;
 548:	ea ef       	ldi	r30, 0xFA	; 250
 54a:	e9 83       	std	Y+1, r30	; 0x01
 54c:	1a 82       	std	Y+2, r1	; 0x02
			}
			
			// Turn laser on (Ch5 > 1500) or off (Ch5 < 1500)
			if((ch5 > 1500) && (laserState == 0) && (laserTimer == 0) && (laserPower == 1)) {
				PORTB |= (1 << PORTB1);
				laserState = 1;
 54e:	f1 e0       	ldi	r31, 0x01	; 1
 550:	fc 83       	std	Y+4, r31	; 0x04
				ledBarCounter = 1;	// Reset LED bar
				ledBarCycle = 1;
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	2b 83       	std	Y+3, r18	; 0x03
				ledBarIndicator = 1;
 556:	22 24       	eor	r2, r2
 558:	23 94       	inc	r2
			
			// Turn laser on (Ch5 > 1500) or off (Ch5 < 1500)
			if((ch5 > 1500) && (laserState == 0) && (laserTimer == 0) && (laserPower == 1)) {
				PORTB |= (1 << PORTB1);
				laserState = 1;
				ledBarCounter = 1;	// Reset LED bar
 55a:	01 e0       	ldi	r16, 0x01	; 1
 55c:	10 e0       	ldi	r17, 0x00	; 0
 55e:	0d c0       	rjmp	.+26     	; 0x57a <main+0x45c>
				ledBarCycle = 1;
				ledBarIndicator = 1;
				laserTimer = LASERWAIT;
				laserPower = 0;
			} else if(ch5 < 1500) {
 560:	80 91 02 01 	lds	r24, 0x0102
 564:	90 91 03 01 	lds	r25, 0x0103
 568:	8c 3d       	cpi	r24, 0xDC	; 220
 56a:	95 40       	sbci	r25, 0x05	; 5
 56c:	14 f4       	brge	.+4      	; 0x572 <main+0x454>
				PORTB &= ~(1 << PORTB1); // Turn off laser
 56e:	29 98       	cbi	0x05, 1	; 5
				laserState = 0;
 570:	3c 82       	std	Y+4, r3	; 0x04
			}
			
			if(laserTimer > 0) {
 572:	89 81       	ldd	r24, Y+1	; 0x01
 574:	9a 81       	ldd	r25, Y+2	; 0x02
 576:	89 2b       	or	r24, r25
 578:	31 f0       	breq	.+12     	; 0x586 <main+0x468>
				laserTimer--;
 57a:	e9 81       	ldd	r30, Y+1	; 0x01
 57c:	fa 81       	ldd	r31, Y+2	; 0x02
 57e:	31 97       	sbiw	r30, 0x01	; 1
 580:	fa 83       	std	Y+2, r31	; 0x02
 582:	e9 83       	std	Y+1, r30	; 0x01
 584:	01 c0       	rjmp	.+2      	; 0x588 <main+0x46a>
			} else {
				PORTB &= ~(1 << PORTB1); // Turn off laser
 586:	29 98       	cbi	0x05, 1	; 5
			} else {
				ledCount++;
			}*/
			
			// LED bar count up
			if((ledBarCounter % LEDBARWAIT == 0) && ledBarCycle < 8) {
 588:	98 01       	movw	r18, r16
 58a:	a3 ec       	ldi	r26, 0xC3	; 195
 58c:	b6 ee       	ldi	r27, 0xE6	; 230
 58e:	0e 94 20 06 	call	0xc40	; 0xc40 <__umulhisi3>
 592:	00 24       	eor	r0, r0
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	00 1c       	adc	r0, r0
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	00 1c       	adc	r0, r0
 5a0:	89 2f       	mov	r24, r25
 5a2:	90 2d       	mov	r25, r0
 5a4:	f7 e4       	ldi	r31, 0x47	; 71
 5a6:	f8 9f       	mul	r31, r24
 5a8:	90 01       	movw	r18, r0
 5aa:	f9 9f       	mul	r31, r25
 5ac:	30 0d       	add	r19, r0
 5ae:	11 24       	eor	r1, r1
 5b0:	02 17       	cp	r16, r18
 5b2:	13 07       	cpc	r17, r19
 5b4:	51 f4       	brne	.+20     	; 0x5ca <main+0x4ac>
 5b6:	2b 81       	ldd	r18, Y+3	; 0x03
 5b8:	28 30       	cpi	r18, 0x08	; 8
 5ba:	38 f4       	brcc	.+14     	; 0x5ca <main+0x4ac>
				ledBarIndicator = (ledBarIndicator << 1) + 1;
 5bc:	22 0c       	add	r2, r2
 5be:	23 94       	inc	r2
				ledBarCounter++;
 5c0:	0f 5f       	subi	r16, 0xFF	; 255
 5c2:	1f 4f       	sbci	r17, 0xFF	; 255
				ledBarCycle++;
 5c4:	2f 5f       	subi	r18, 0xFF	; 255
 5c6:	2b 83       	std	Y+3, r18	; 0x03
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <main+0x4bc>
			} else if (ledBarCycle == 8) {
 5ca:	3b 81       	ldd	r19, Y+3	; 0x03
 5cc:	38 30       	cpi	r19, 0x08	; 8
 5ce:	19 f0       	breq	.+6      	; 0x5d6 <main+0x4b8>
				laserPower = 1;
			} else {
				ledBarCounter++;
 5d0:	0f 5f       	subi	r16, 0xFF	; 255
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <main+0x4bc>
			if((ledBarCounter % LEDBARWAIT == 0) && ledBarCycle < 8) {
				ledBarIndicator = (ledBarIndicator << 1) + 1;
				ledBarCounter++;
				ledBarCycle++;
			} else if (ledBarCycle == 8) {
				laserPower = 1;
 5d6:	41 e0       	ldi	r20, 0x01	; 1
 5d8:	4d 83       	std	Y+5, r20	; 0x05
			} else {
				ledBarCounter++;
			}
			
			// Display LED bar
			shiftByteOut(ledBarIndicator);
 5da:	82 2d       	mov	r24, r2
 5dc:	0e 94 75 00 	call	0xea	; 0xea <shiftByteOut>
			
			// Check for laser hit
			if((PINB & (1 << PORTB2)) == 0) {
 5e0:	1a 99       	sbic	0x03, 2	; 3
 5e2:	29 c0       	rjmp	.+82     	; 0x636 <main+0x518>
				DCMotorStop();				// Turn off motors
 5e4:	0e 94 53 00 	call	0xa6	; 0xa6 <DCMotorStop>
				PORTB &= ~(1 << PORTB1);	// Turn off laser
 5e8:	29 98       	cbi	0x05, 1	; 5
 5ea:	0a e0       	ldi	r16, 0x0A	; 10
 5ec:	10 e0       	ldi	r17, 0x00	; 0
				// Lock up and flash LEDs
				for(int i = 0; i < 10; i++) {
					shiftByteOut(0b11111111);
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	0e 94 75 00 	call	0xea	; 0xea <shiftByteOut>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	94 e3       	ldi	r25, 0x34	; 52
 5f8:	ec e0       	ldi	r30, 0x0C	; 12
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	90 40       	sbci	r25, 0x00	; 0
 5fe:	e0 40       	sbci	r30, 0x00	; 0
 600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x4dc>
 602:	00 c0       	rjmp	.+0      	; 0x604 <main+0x4e6>
 604:	00 00       	nop
					_delay_ms(250);
					shiftByteOut(0b00000000);
 606:	83 2d       	mov	r24, r3
 608:	0e 94 75 00 	call	0xea	; 0xea <shiftByteOut>
 60c:	ff ef       	ldi	r31, 0xFF	; 255
 60e:	24 e3       	ldi	r18, 0x34	; 52
 610:	3c e0       	ldi	r19, 0x0C	; 12
 612:	f1 50       	subi	r31, 0x01	; 1
 614:	20 40       	sbci	r18, 0x00	; 0
 616:	30 40       	sbci	r19, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <main+0x4f4>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x4fe>
 61c:	00 00       	nop
 61e:	01 50       	subi	r16, 0x01	; 1
 620:	11 09       	sbc	r17, r1
			// Check for laser hit
			if((PINB & (1 << PORTB2)) == 0) {
				DCMotorStop();				// Turn off motors
				PORTB &= ~(1 << PORTB1);	// Turn off laser
				// Lock up and flash LEDs
				for(int i = 0; i < 10; i++) {
 622:	01 15       	cp	r16, r1
 624:	11 05       	cpc	r17, r1
 626:	19 f7       	brne	.-58     	; 0x5ee <main+0x4d0>
					_delay_ms(250);
				}
				ledBarCounter = 1;	// Reset LED bar
				ledBarCycle = 1;
				ledBarIndicator = 1;
				laserPower = 0;		// Reset laser power
 628:	3d 82       	std	Y+5, r3	; 0x05
					_delay_ms(250);
					shiftByteOut(0b00000000);
					_delay_ms(250);
				}
				ledBarCounter = 1;	// Reset LED bar
				ledBarCycle = 1;
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	4b 83       	std	Y+3, r20	; 0x03
				ledBarIndicator = 1;
 62e:	22 24       	eor	r2, r2
 630:	23 94       	inc	r2
					shiftByteOut(0b11111111);
					_delay_ms(250);
					shiftByteOut(0b00000000);
					_delay_ms(250);
				}
				ledBarCounter = 1;	// Reset LED bar
 632:	01 e0       	ldi	r16, 0x01	; 1
 634:	10 e0       	ldi	r17, 0x00	; 0
				ledBarCycle = 1;
				ledBarIndicator = 1;
				laserPower = 0;		// Reset laser power
			}
			
			start_flag = 0;		// Reset flag after speeds have updated
 636:	30 92 0c 01 	sts	0x010C, r3
 63a:	99 cd       	rjmp	.-1230   	; 0x16e <main+0x50>

0000063c <__vector_4>:
	PORTD |= (1 << PORTD1);			// latch high
	PORTD &= ~(1 << PORTD1);		// latch low
	return;
}

ISR (PCINT1_vect) {
 63c:	1f 92       	push	r1
 63e:	0f 92       	push	r0
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	0f 92       	push	r0
 644:	11 24       	eor	r1, r1
 646:	2f 93       	push	r18
 648:	3f 93       	push	r19
 64a:	4f 93       	push	r20
 64c:	5f 93       	push	r21
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
	// Read six RC channels on PC0/PCINT8 (Ch1) to PC5/PCINT13 (Ch6)
	// Check to see if it is a rising edge for each channel to start timing
	// Falling edge to stop timing
	uint16_t currentTime = TCNT1 / 2;		// Read Timer/Counter1 in microseconds
 652:	80 91 84 00 	lds	r24, 0x0084
 656:	90 91 85 00 	lds	r25, 0x0085
 65a:	96 95       	lsr	r25
 65c:	87 95       	ror	r24
	
	if(PINC & (1 << PORTC0)) {		// Channel 1
 65e:	30 9b       	sbis	0x06, 0	; 6
 660:	12 c0       	rjmp	.+36     	; 0x686 <__vector_4+0x4a>
		if(ch1_state == 0) {
 662:	20 91 12 01 	lds	r18, 0x0112
 666:	21 11       	cpse	r18, r1
 668:	21 c0       	rjmp	.+66     	; 0x6ac <__vector_4+0x70>
			TCNT1 = 0;			// Reset timer at start of ch1 only
 66a:	10 92 85 00 	sts	0x0085, r1
 66e:	10 92 84 00 	sts	0x0084, r1
			ch1_start = 0;
 672:	10 92 1e 01 	sts	0x011E, r1
 676:	10 92 1d 01 	sts	0x011D, r1
			ch1_state = 1;
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	20 93 12 01 	sts	0x0112, r18
			start_flag = 1;		// Set flag to update motor speeds & directions
 680:	20 93 0c 01 	sts	0x010C, r18
 684:	13 c0       	rjmp	.+38     	; 0x6ac <__vector_4+0x70>
		}
	} else if((PINC & (1 << PORTC0)) == 0) {
 686:	30 99       	sbic	0x06, 0	; 6
 688:	11 c0       	rjmp	.+34     	; 0x6ac <__vector_4+0x70>
		if(ch1_state == 1) {
 68a:	20 91 12 01 	lds	r18, 0x0112
 68e:	21 30       	cpi	r18, 0x01	; 1
 690:	69 f4       	brne	.+26     	; 0x6ac <__vector_4+0x70>
			ch1 = currentTime - ch1_start;
 692:	20 91 1d 01 	lds	r18, 0x011D
 696:	30 91 1e 01 	lds	r19, 0x011E
 69a:	ac 01       	movw	r20, r24
 69c:	42 1b       	sub	r20, r18
 69e:	53 0b       	sbc	r21, r19
 6a0:	50 93 0b 01 	sts	0x010B, r21
 6a4:	40 93 0a 01 	sts	0x010A, r20
			ch1_state = 0;
 6a8:	10 92 12 01 	sts	0x0112, r1
		}
	}
	
	if(PINC & (1 << PORTC1)) {		//Channel 2
 6ac:	31 9b       	sbis	0x06, 1	; 6
 6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <__vector_4+0x8c>
		if(ch2_state == 0) {
 6b0:	20 91 11 01 	lds	r18, 0x0111
 6b4:	21 11       	cpse	r18, r1
 6b6:	1b c0       	rjmp	.+54     	; 0x6ee <__vector_4+0xb2>
			ch2_start = currentTime;
 6b8:	90 93 1c 01 	sts	0x011C, r25
 6bc:	80 93 1b 01 	sts	0x011B, r24
			ch2_state = 1;
 6c0:	21 e0       	ldi	r18, 0x01	; 1
 6c2:	20 93 11 01 	sts	0x0111, r18
 6c6:	13 c0       	rjmp	.+38     	; 0x6ee <__vector_4+0xb2>
		}
	} else if((PINC & (1 << PORTC1)) == 0) {
 6c8:	31 99       	sbic	0x06, 1	; 6
 6ca:	11 c0       	rjmp	.+34     	; 0x6ee <__vector_4+0xb2>
		if(ch2_state == 1) {
 6cc:	20 91 11 01 	lds	r18, 0x0111
 6d0:	21 30       	cpi	r18, 0x01	; 1
 6d2:	69 f4       	brne	.+26     	; 0x6ee <__vector_4+0xb2>
			ch2 = currentTime - ch2_start;
 6d4:	20 91 1b 01 	lds	r18, 0x011B
 6d8:	30 91 1c 01 	lds	r19, 0x011C
 6dc:	ac 01       	movw	r20, r24
 6de:	42 1b       	sub	r20, r18
 6e0:	53 0b       	sbc	r21, r19
 6e2:	50 93 09 01 	sts	0x0109, r21
 6e6:	40 93 08 01 	sts	0x0108, r20
			ch2_state = 0;
 6ea:	10 92 11 01 	sts	0x0111, r1
		}
	}
	
	if(PINC & (1 << PORTC2)) {		//Channel 3
 6ee:	32 9b       	sbis	0x06, 2	; 6
 6f0:	0c c0       	rjmp	.+24     	; 0x70a <__vector_4+0xce>
		if(ch3_state == 0) {
 6f2:	20 91 10 01 	lds	r18, 0x0110
 6f6:	21 11       	cpse	r18, r1
 6f8:	1b c0       	rjmp	.+54     	; 0x730 <__vector_4+0xf4>
			ch3_start = currentTime;
 6fa:	90 93 1a 01 	sts	0x011A, r25
 6fe:	80 93 19 01 	sts	0x0119, r24
			ch3_state = 1;
 702:	21 e0       	ldi	r18, 0x01	; 1
 704:	20 93 10 01 	sts	0x0110, r18
 708:	13 c0       	rjmp	.+38     	; 0x730 <__vector_4+0xf4>
		}
	} else if((PINC & (1 << PORTC2)) == 0) {
 70a:	32 99       	sbic	0x06, 2	; 6
 70c:	11 c0       	rjmp	.+34     	; 0x730 <__vector_4+0xf4>
		if(ch3_state == 1) {
 70e:	20 91 10 01 	lds	r18, 0x0110
 712:	21 30       	cpi	r18, 0x01	; 1
 714:	69 f4       	brne	.+26     	; 0x730 <__vector_4+0xf4>
			ch3 = currentTime - ch3_start;
 716:	20 91 19 01 	lds	r18, 0x0119
 71a:	30 91 1a 01 	lds	r19, 0x011A
 71e:	ac 01       	movw	r20, r24
 720:	42 1b       	sub	r20, r18
 722:	53 0b       	sbc	r21, r19
 724:	50 93 07 01 	sts	0x0107, r21
 728:	40 93 06 01 	sts	0x0106, r20
			ch3_state = 0;
 72c:	10 92 10 01 	sts	0x0110, r1
		}
	}
	
	if(PINC & (1 << PORTC3)) {		//Channel 4
 730:	33 9b       	sbis	0x06, 3	; 6
 732:	0c c0       	rjmp	.+24     	; 0x74c <__vector_4+0x110>
		if(ch4_state == 0) {
 734:	20 91 0f 01 	lds	r18, 0x010F
 738:	21 11       	cpse	r18, r1
 73a:	1b c0       	rjmp	.+54     	; 0x772 <__vector_4+0x136>
			ch4_start = currentTime;
 73c:	90 93 18 01 	sts	0x0118, r25
 740:	80 93 17 01 	sts	0x0117, r24
			ch4_state = 1;
 744:	21 e0       	ldi	r18, 0x01	; 1
 746:	20 93 0f 01 	sts	0x010F, r18
 74a:	13 c0       	rjmp	.+38     	; 0x772 <__vector_4+0x136>
		}
	} else if((PINC & (1 << PORTC3)) == 0) {
 74c:	33 99       	sbic	0x06, 3	; 6
 74e:	11 c0       	rjmp	.+34     	; 0x772 <__vector_4+0x136>
		if(ch4_state == 1) {
 750:	20 91 0f 01 	lds	r18, 0x010F
 754:	21 30       	cpi	r18, 0x01	; 1
 756:	69 f4       	brne	.+26     	; 0x772 <__vector_4+0x136>
			ch4 = currentTime - ch4_start;
 758:	20 91 17 01 	lds	r18, 0x0117
 75c:	30 91 18 01 	lds	r19, 0x0118
 760:	ac 01       	movw	r20, r24
 762:	42 1b       	sub	r20, r18
 764:	53 0b       	sbc	r21, r19
 766:	50 93 05 01 	sts	0x0105, r21
 76a:	40 93 04 01 	sts	0x0104, r20
			ch4_state = 0;
 76e:	10 92 0f 01 	sts	0x010F, r1
		}
	}
	
	if(PINC & (1 << PORTC4)) {		//Channel 5
 772:	34 9b       	sbis	0x06, 4	; 6
 774:	0c c0       	rjmp	.+24     	; 0x78e <__vector_4+0x152>
		if(ch5_state == 0) {
 776:	20 91 0e 01 	lds	r18, 0x010E
 77a:	21 11       	cpse	r18, r1
 77c:	1b c0       	rjmp	.+54     	; 0x7b4 <__vector_4+0x178>
			ch5_start = currentTime;
 77e:	90 93 16 01 	sts	0x0116, r25
 782:	80 93 15 01 	sts	0x0115, r24
			ch5_state = 1;
 786:	21 e0       	ldi	r18, 0x01	; 1
 788:	20 93 0e 01 	sts	0x010E, r18
 78c:	13 c0       	rjmp	.+38     	; 0x7b4 <__vector_4+0x178>
		}
	} else if((PINC & (1 << PORTC4)) == 0) {
 78e:	34 99       	sbic	0x06, 4	; 6
 790:	11 c0       	rjmp	.+34     	; 0x7b4 <__vector_4+0x178>
		if(ch5_state == 1) {
 792:	20 91 0e 01 	lds	r18, 0x010E
 796:	21 30       	cpi	r18, 0x01	; 1
 798:	69 f4       	brne	.+26     	; 0x7b4 <__vector_4+0x178>
			ch5 = currentTime - ch5_start;
 79a:	20 91 15 01 	lds	r18, 0x0115
 79e:	30 91 16 01 	lds	r19, 0x0116
 7a2:	ac 01       	movw	r20, r24
 7a4:	42 1b       	sub	r20, r18
 7a6:	53 0b       	sbc	r21, r19
 7a8:	50 93 03 01 	sts	0x0103, r21
 7ac:	40 93 02 01 	sts	0x0102, r20
			ch5_state = 0;
 7b0:	10 92 0e 01 	sts	0x010E, r1
		}
	}
	
	if(PINC & (1 << PORTC5)) {		//Channel 6
 7b4:	35 9b       	sbis	0x06, 5	; 6
 7b6:	0c c0       	rjmp	.+24     	; 0x7d0 <__vector_4+0x194>
		if(ch6_state == 0) {
 7b8:	20 91 0d 01 	lds	r18, 0x010D
 7bc:	21 11       	cpse	r18, r1
 7be:	1a c0       	rjmp	.+52     	; 0x7f4 <__vector_4+0x1b8>
			ch6_start = currentTime;
 7c0:	90 93 14 01 	sts	0x0114, r25
 7c4:	80 93 13 01 	sts	0x0113, r24
			ch6_state = 1;
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	80 93 0d 01 	sts	0x010D, r24
 7ce:	12 c0       	rjmp	.+36     	; 0x7f4 <__vector_4+0x1b8>
		}
	} else if((PINC & (1 << PORTC5)) == 0) {
 7d0:	35 99       	sbic	0x06, 5	; 6
 7d2:	10 c0       	rjmp	.+32     	; 0x7f4 <__vector_4+0x1b8>
		if(ch6_state == 1) {
 7d4:	20 91 0d 01 	lds	r18, 0x010D
 7d8:	21 30       	cpi	r18, 0x01	; 1
 7da:	61 f4       	brne	.+24     	; 0x7f4 <__vector_4+0x1b8>
			ch6 = currentTime - ch6_start;
 7dc:	20 91 13 01 	lds	r18, 0x0113
 7e0:	30 91 14 01 	lds	r19, 0x0114
 7e4:	82 1b       	sub	r24, r18
 7e6:	93 0b       	sbc	r25, r19
 7e8:	90 93 01 01 	sts	0x0101, r25
 7ec:	80 93 00 01 	sts	0x0100, r24
			ch6_state = 0;
 7f0:	10 92 0d 01 	sts	0x010D, r1
		}
	}
}
 7f4:	9f 91       	pop	r25
 7f6:	8f 91       	pop	r24
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <__subsf3>:
 80a:	50 58       	subi	r21, 0x80	; 128

0000080c <__addsf3>:
 80c:	bb 27       	eor	r27, r27
 80e:	aa 27       	eor	r26, r26
 810:	0e d0       	rcall	.+28     	; 0x82e <__addsf3x>
 812:	75 c1       	rjmp	.+746    	; 0xafe <__fp_round>
 814:	66 d1       	rcall	.+716    	; 0xae2 <__fp_pscA>
 816:	30 f0       	brcs	.+12     	; 0x824 <__addsf3+0x18>
 818:	6b d1       	rcall	.+726    	; 0xaf0 <__fp_pscB>
 81a:	20 f0       	brcs	.+8      	; 0x824 <__addsf3+0x18>
 81c:	31 f4       	brne	.+12     	; 0x82a <__addsf3+0x1e>
 81e:	9f 3f       	cpi	r25, 0xFF	; 255
 820:	11 f4       	brne	.+4      	; 0x826 <__addsf3+0x1a>
 822:	1e f4       	brtc	.+6      	; 0x82a <__addsf3+0x1e>
 824:	5b c1       	rjmp	.+694    	; 0xadc <__fp_nan>
 826:	0e f4       	brtc	.+2      	; 0x82a <__addsf3+0x1e>
 828:	e0 95       	com	r30
 82a:	e7 fb       	bst	r30, 7
 82c:	51 c1       	rjmp	.+674    	; 0xad0 <__fp_inf>

0000082e <__addsf3x>:
 82e:	e9 2f       	mov	r30, r25
 830:	77 d1       	rcall	.+750    	; 0xb20 <__fp_split3>
 832:	80 f3       	brcs	.-32     	; 0x814 <__addsf3+0x8>
 834:	ba 17       	cp	r27, r26
 836:	62 07       	cpc	r22, r18
 838:	73 07       	cpc	r23, r19
 83a:	84 07       	cpc	r24, r20
 83c:	95 07       	cpc	r25, r21
 83e:	18 f0       	brcs	.+6      	; 0x846 <__addsf3x+0x18>
 840:	71 f4       	brne	.+28     	; 0x85e <__addsf3x+0x30>
 842:	9e f5       	brtc	.+102    	; 0x8aa <__addsf3x+0x7c>
 844:	8f c1       	rjmp	.+798    	; 0xb64 <__fp_zero>
 846:	0e f4       	brtc	.+2      	; 0x84a <__addsf3x+0x1c>
 848:	e0 95       	com	r30
 84a:	0b 2e       	mov	r0, r27
 84c:	ba 2f       	mov	r27, r26
 84e:	a0 2d       	mov	r26, r0
 850:	0b 01       	movw	r0, r22
 852:	b9 01       	movw	r22, r18
 854:	90 01       	movw	r18, r0
 856:	0c 01       	movw	r0, r24
 858:	ca 01       	movw	r24, r20
 85a:	a0 01       	movw	r20, r0
 85c:	11 24       	eor	r1, r1
 85e:	ff 27       	eor	r31, r31
 860:	59 1b       	sub	r21, r25
 862:	99 f0       	breq	.+38     	; 0x88a <__addsf3x+0x5c>
 864:	59 3f       	cpi	r21, 0xF9	; 249
 866:	50 f4       	brcc	.+20     	; 0x87c <__addsf3x+0x4e>
 868:	50 3e       	cpi	r21, 0xE0	; 224
 86a:	68 f1       	brcs	.+90     	; 0x8c6 <__addsf3x+0x98>
 86c:	1a 16       	cp	r1, r26
 86e:	f0 40       	sbci	r31, 0x00	; 0
 870:	a2 2f       	mov	r26, r18
 872:	23 2f       	mov	r18, r19
 874:	34 2f       	mov	r19, r20
 876:	44 27       	eor	r20, r20
 878:	58 5f       	subi	r21, 0xF8	; 248
 87a:	f3 cf       	rjmp	.-26     	; 0x862 <__addsf3x+0x34>
 87c:	46 95       	lsr	r20
 87e:	37 95       	ror	r19
 880:	27 95       	ror	r18
 882:	a7 95       	ror	r26
 884:	f0 40       	sbci	r31, 0x00	; 0
 886:	53 95       	inc	r21
 888:	c9 f7       	brne	.-14     	; 0x87c <__addsf3x+0x4e>
 88a:	7e f4       	brtc	.+30     	; 0x8aa <__addsf3x+0x7c>
 88c:	1f 16       	cp	r1, r31
 88e:	ba 0b       	sbc	r27, r26
 890:	62 0b       	sbc	r22, r18
 892:	73 0b       	sbc	r23, r19
 894:	84 0b       	sbc	r24, r20
 896:	ba f0       	brmi	.+46     	; 0x8c6 <__addsf3x+0x98>
 898:	91 50       	subi	r25, 0x01	; 1
 89a:	a1 f0       	breq	.+40     	; 0x8c4 <__addsf3x+0x96>
 89c:	ff 0f       	add	r31, r31
 89e:	bb 1f       	adc	r27, r27
 8a0:	66 1f       	adc	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	c2 f7       	brpl	.-16     	; 0x898 <__addsf3x+0x6a>
 8a8:	0e c0       	rjmp	.+28     	; 0x8c6 <__addsf3x+0x98>
 8aa:	ba 0f       	add	r27, r26
 8ac:	62 1f       	adc	r22, r18
 8ae:	73 1f       	adc	r23, r19
 8b0:	84 1f       	adc	r24, r20
 8b2:	48 f4       	brcc	.+18     	; 0x8c6 <__addsf3x+0x98>
 8b4:	87 95       	ror	r24
 8b6:	77 95       	ror	r23
 8b8:	67 95       	ror	r22
 8ba:	b7 95       	ror	r27
 8bc:	f7 95       	ror	r31
 8be:	9e 3f       	cpi	r25, 0xFE	; 254
 8c0:	08 f0       	brcs	.+2      	; 0x8c4 <__addsf3x+0x96>
 8c2:	b3 cf       	rjmp	.-154    	; 0x82a <__addsf3+0x1e>
 8c4:	93 95       	inc	r25
 8c6:	88 0f       	add	r24, r24
 8c8:	08 f0       	brcs	.+2      	; 0x8cc <__addsf3x+0x9e>
 8ca:	99 27       	eor	r25, r25
 8cc:	ee 0f       	add	r30, r30
 8ce:	97 95       	ror	r25
 8d0:	87 95       	ror	r24
 8d2:	08 95       	ret

000008d4 <__cmpsf2>:
 8d4:	d9 d0       	rcall	.+434    	; 0xa88 <__fp_cmp>
 8d6:	08 f4       	brcc	.+2      	; 0x8da <__cmpsf2+0x6>
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	08 95       	ret

000008dc <__divsf3>:
 8dc:	0c d0       	rcall	.+24     	; 0x8f6 <__divsf3x>
 8de:	0f c1       	rjmp	.+542    	; 0xafe <__fp_round>
 8e0:	07 d1       	rcall	.+526    	; 0xaf0 <__fp_pscB>
 8e2:	40 f0       	brcs	.+16     	; 0x8f4 <__divsf3+0x18>
 8e4:	fe d0       	rcall	.+508    	; 0xae2 <__fp_pscA>
 8e6:	30 f0       	brcs	.+12     	; 0x8f4 <__divsf3+0x18>
 8e8:	21 f4       	brne	.+8      	; 0x8f2 <__divsf3+0x16>
 8ea:	5f 3f       	cpi	r21, 0xFF	; 255
 8ec:	19 f0       	breq	.+6      	; 0x8f4 <__divsf3+0x18>
 8ee:	f0 c0       	rjmp	.+480    	; 0xad0 <__fp_inf>
 8f0:	51 11       	cpse	r21, r1
 8f2:	39 c1       	rjmp	.+626    	; 0xb66 <__fp_szero>
 8f4:	f3 c0       	rjmp	.+486    	; 0xadc <__fp_nan>

000008f6 <__divsf3x>:
 8f6:	14 d1       	rcall	.+552    	; 0xb20 <__fp_split3>
 8f8:	98 f3       	brcs	.-26     	; 0x8e0 <__divsf3+0x4>

000008fa <__divsf3_pse>:
 8fa:	99 23       	and	r25, r25
 8fc:	c9 f3       	breq	.-14     	; 0x8f0 <__divsf3+0x14>
 8fe:	55 23       	and	r21, r21
 900:	b1 f3       	breq	.-20     	; 0x8ee <__divsf3+0x12>
 902:	95 1b       	sub	r25, r21
 904:	55 0b       	sbc	r21, r21
 906:	bb 27       	eor	r27, r27
 908:	aa 27       	eor	r26, r26
 90a:	62 17       	cp	r22, r18
 90c:	73 07       	cpc	r23, r19
 90e:	84 07       	cpc	r24, r20
 910:	38 f0       	brcs	.+14     	; 0x920 <__stack+0x21>
 912:	9f 5f       	subi	r25, 0xFF	; 255
 914:	5f 4f       	sbci	r21, 0xFF	; 255
 916:	22 0f       	add	r18, r18
 918:	33 1f       	adc	r19, r19
 91a:	44 1f       	adc	r20, r20
 91c:	aa 1f       	adc	r26, r26
 91e:	a9 f3       	breq	.-22     	; 0x90a <__stack+0xb>
 920:	33 d0       	rcall	.+102    	; 0x988 <__stack+0x89>
 922:	0e 2e       	mov	r0, r30
 924:	3a f0       	brmi	.+14     	; 0x934 <__stack+0x35>
 926:	e0 e8       	ldi	r30, 0x80	; 128
 928:	30 d0       	rcall	.+96     	; 0x98a <__stack+0x8b>
 92a:	91 50       	subi	r25, 0x01	; 1
 92c:	50 40       	sbci	r21, 0x00	; 0
 92e:	e6 95       	lsr	r30
 930:	00 1c       	adc	r0, r0
 932:	ca f7       	brpl	.-14     	; 0x926 <__stack+0x27>
 934:	29 d0       	rcall	.+82     	; 0x988 <__stack+0x89>
 936:	fe 2f       	mov	r31, r30
 938:	27 d0       	rcall	.+78     	; 0x988 <__stack+0x89>
 93a:	66 0f       	add	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	88 1f       	adc	r24, r24
 940:	bb 1f       	adc	r27, r27
 942:	26 17       	cp	r18, r22
 944:	37 07       	cpc	r19, r23
 946:	48 07       	cpc	r20, r24
 948:	ab 07       	cpc	r26, r27
 94a:	b0 e8       	ldi	r27, 0x80	; 128
 94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0x51>
 94e:	bb 0b       	sbc	r27, r27
 950:	80 2d       	mov	r24, r0
 952:	bf 01       	movw	r22, r30
 954:	ff 27       	eor	r31, r31
 956:	93 58       	subi	r25, 0x83	; 131
 958:	5f 4f       	sbci	r21, 0xFF	; 255
 95a:	2a f0       	brmi	.+10     	; 0x966 <__stack+0x67>
 95c:	9e 3f       	cpi	r25, 0xFE	; 254
 95e:	51 05       	cpc	r21, r1
 960:	68 f0       	brcs	.+26     	; 0x97c <__stack+0x7d>
 962:	b6 c0       	rjmp	.+364    	; 0xad0 <__fp_inf>
 964:	00 c1       	rjmp	.+512    	; 0xb66 <__fp_szero>
 966:	5f 3f       	cpi	r21, 0xFF	; 255
 968:	ec f3       	brlt	.-6      	; 0x964 <__stack+0x65>
 96a:	98 3e       	cpi	r25, 0xE8	; 232
 96c:	dc f3       	brlt	.-10     	; 0x964 <__stack+0x65>
 96e:	86 95       	lsr	r24
 970:	77 95       	ror	r23
 972:	67 95       	ror	r22
 974:	b7 95       	ror	r27
 976:	f7 95       	ror	r31
 978:	9f 5f       	subi	r25, 0xFF	; 255
 97a:	c9 f7       	brne	.-14     	; 0x96e <__stack+0x6f>
 97c:	88 0f       	add	r24, r24
 97e:	91 1d       	adc	r25, r1
 980:	96 95       	lsr	r25
 982:	87 95       	ror	r24
 984:	97 f9       	bld	r25, 7
 986:	08 95       	ret
 988:	e1 e0       	ldi	r30, 0x01	; 1
 98a:	66 0f       	add	r22, r22
 98c:	77 1f       	adc	r23, r23
 98e:	88 1f       	adc	r24, r24
 990:	bb 1f       	adc	r27, r27
 992:	62 17       	cp	r22, r18
 994:	73 07       	cpc	r23, r19
 996:	84 07       	cpc	r24, r20
 998:	ba 07       	cpc	r27, r26
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__stack+0xa5>
 99c:	62 1b       	sub	r22, r18
 99e:	73 0b       	sbc	r23, r19
 9a0:	84 0b       	sbc	r24, r20
 9a2:	ba 0b       	sbc	r27, r26
 9a4:	ee 1f       	adc	r30, r30
 9a6:	88 f7       	brcc	.-30     	; 0x98a <__stack+0x8b>
 9a8:	e0 95       	com	r30
 9aa:	08 95       	ret

000009ac <__fixsfsi>:
 9ac:	04 d0       	rcall	.+8      	; 0x9b6 <__fixunssfsi>
 9ae:	68 94       	set
 9b0:	b1 11       	cpse	r27, r1
 9b2:	d9 c0       	rjmp	.+434    	; 0xb66 <__fp_szero>
 9b4:	08 95       	ret

000009b6 <__fixunssfsi>:
 9b6:	bc d0       	rcall	.+376    	; 0xb30 <__fp_splitA>
 9b8:	88 f0       	brcs	.+34     	; 0x9dc <__fixunssfsi+0x26>
 9ba:	9f 57       	subi	r25, 0x7F	; 127
 9bc:	90 f0       	brcs	.+36     	; 0x9e2 <__fixunssfsi+0x2c>
 9be:	b9 2f       	mov	r27, r25
 9c0:	99 27       	eor	r25, r25
 9c2:	b7 51       	subi	r27, 0x17	; 23
 9c4:	a0 f0       	brcs	.+40     	; 0x9ee <__fixunssfsi+0x38>
 9c6:	d1 f0       	breq	.+52     	; 0x9fc <__fixunssfsi+0x46>
 9c8:	66 0f       	add	r22, r22
 9ca:	77 1f       	adc	r23, r23
 9cc:	88 1f       	adc	r24, r24
 9ce:	99 1f       	adc	r25, r25
 9d0:	1a f0       	brmi	.+6      	; 0x9d8 <__fixunssfsi+0x22>
 9d2:	ba 95       	dec	r27
 9d4:	c9 f7       	brne	.-14     	; 0x9c8 <__fixunssfsi+0x12>
 9d6:	12 c0       	rjmp	.+36     	; 0x9fc <__fixunssfsi+0x46>
 9d8:	b1 30       	cpi	r27, 0x01	; 1
 9da:	81 f0       	breq	.+32     	; 0x9fc <__fixunssfsi+0x46>
 9dc:	c3 d0       	rcall	.+390    	; 0xb64 <__fp_zero>
 9de:	b1 e0       	ldi	r27, 0x01	; 1
 9e0:	08 95       	ret
 9e2:	c0 c0       	rjmp	.+384    	; 0xb64 <__fp_zero>
 9e4:	67 2f       	mov	r22, r23
 9e6:	78 2f       	mov	r23, r24
 9e8:	88 27       	eor	r24, r24
 9ea:	b8 5f       	subi	r27, 0xF8	; 248
 9ec:	39 f0       	breq	.+14     	; 0x9fc <__fixunssfsi+0x46>
 9ee:	b9 3f       	cpi	r27, 0xF9	; 249
 9f0:	cc f3       	brlt	.-14     	; 0x9e4 <__fixunssfsi+0x2e>
 9f2:	86 95       	lsr	r24
 9f4:	77 95       	ror	r23
 9f6:	67 95       	ror	r22
 9f8:	b3 95       	inc	r27
 9fa:	d9 f7       	brne	.-10     	; 0x9f2 <__fixunssfsi+0x3c>
 9fc:	3e f4       	brtc	.+14     	; 0xa0c <__fixunssfsi+0x56>
 9fe:	90 95       	com	r25
 a00:	80 95       	com	r24
 a02:	70 95       	com	r23
 a04:	61 95       	neg	r22
 a06:	7f 4f       	sbci	r23, 0xFF	; 255
 a08:	8f 4f       	sbci	r24, 0xFF	; 255
 a0a:	9f 4f       	sbci	r25, 0xFF	; 255
 a0c:	08 95       	ret

00000a0e <__floatunsisf>:
 a0e:	e8 94       	clt
 a10:	09 c0       	rjmp	.+18     	; 0xa24 <__floatsisf+0x12>

00000a12 <__floatsisf>:
 a12:	97 fb       	bst	r25, 7
 a14:	3e f4       	brtc	.+14     	; 0xa24 <__floatsisf+0x12>
 a16:	90 95       	com	r25
 a18:	80 95       	com	r24
 a1a:	70 95       	com	r23
 a1c:	61 95       	neg	r22
 a1e:	7f 4f       	sbci	r23, 0xFF	; 255
 a20:	8f 4f       	sbci	r24, 0xFF	; 255
 a22:	9f 4f       	sbci	r25, 0xFF	; 255
 a24:	99 23       	and	r25, r25
 a26:	a9 f0       	breq	.+42     	; 0xa52 <__floatsisf+0x40>
 a28:	f9 2f       	mov	r31, r25
 a2a:	96 e9       	ldi	r25, 0x96	; 150
 a2c:	bb 27       	eor	r27, r27
 a2e:	93 95       	inc	r25
 a30:	f6 95       	lsr	r31
 a32:	87 95       	ror	r24
 a34:	77 95       	ror	r23
 a36:	67 95       	ror	r22
 a38:	b7 95       	ror	r27
 a3a:	f1 11       	cpse	r31, r1
 a3c:	f8 cf       	rjmp	.-16     	; 0xa2e <__floatsisf+0x1c>
 a3e:	fa f4       	brpl	.+62     	; 0xa7e <__floatsisf+0x6c>
 a40:	bb 0f       	add	r27, r27
 a42:	11 f4       	brne	.+4      	; 0xa48 <__floatsisf+0x36>
 a44:	60 ff       	sbrs	r22, 0
 a46:	1b c0       	rjmp	.+54     	; 0xa7e <__floatsisf+0x6c>
 a48:	6f 5f       	subi	r22, 0xFF	; 255
 a4a:	7f 4f       	sbci	r23, 0xFF	; 255
 a4c:	8f 4f       	sbci	r24, 0xFF	; 255
 a4e:	9f 4f       	sbci	r25, 0xFF	; 255
 a50:	16 c0       	rjmp	.+44     	; 0xa7e <__floatsisf+0x6c>
 a52:	88 23       	and	r24, r24
 a54:	11 f0       	breq	.+4      	; 0xa5a <__floatsisf+0x48>
 a56:	96 e9       	ldi	r25, 0x96	; 150
 a58:	11 c0       	rjmp	.+34     	; 0xa7c <__floatsisf+0x6a>
 a5a:	77 23       	and	r23, r23
 a5c:	21 f0       	breq	.+8      	; 0xa66 <__floatsisf+0x54>
 a5e:	9e e8       	ldi	r25, 0x8E	; 142
 a60:	87 2f       	mov	r24, r23
 a62:	76 2f       	mov	r23, r22
 a64:	05 c0       	rjmp	.+10     	; 0xa70 <__floatsisf+0x5e>
 a66:	66 23       	and	r22, r22
 a68:	71 f0       	breq	.+28     	; 0xa86 <__floatsisf+0x74>
 a6a:	96 e8       	ldi	r25, 0x86	; 134
 a6c:	86 2f       	mov	r24, r22
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	60 e0       	ldi	r22, 0x00	; 0
 a72:	2a f0       	brmi	.+10     	; 0xa7e <__floatsisf+0x6c>
 a74:	9a 95       	dec	r25
 a76:	66 0f       	add	r22, r22
 a78:	77 1f       	adc	r23, r23
 a7a:	88 1f       	adc	r24, r24
 a7c:	da f7       	brpl	.-10     	; 0xa74 <__floatsisf+0x62>
 a7e:	88 0f       	add	r24, r24
 a80:	96 95       	lsr	r25
 a82:	87 95       	ror	r24
 a84:	97 f9       	bld	r25, 7
 a86:	08 95       	ret

00000a88 <__fp_cmp>:
 a88:	99 0f       	add	r25, r25
 a8a:	00 08       	sbc	r0, r0
 a8c:	55 0f       	add	r21, r21
 a8e:	aa 0b       	sbc	r26, r26
 a90:	e0 e8       	ldi	r30, 0x80	; 128
 a92:	fe ef       	ldi	r31, 0xFE	; 254
 a94:	16 16       	cp	r1, r22
 a96:	17 06       	cpc	r1, r23
 a98:	e8 07       	cpc	r30, r24
 a9a:	f9 07       	cpc	r31, r25
 a9c:	c0 f0       	brcs	.+48     	; 0xace <__fp_cmp+0x46>
 a9e:	12 16       	cp	r1, r18
 aa0:	13 06       	cpc	r1, r19
 aa2:	e4 07       	cpc	r30, r20
 aa4:	f5 07       	cpc	r31, r21
 aa6:	98 f0       	brcs	.+38     	; 0xace <__fp_cmp+0x46>
 aa8:	62 1b       	sub	r22, r18
 aaa:	73 0b       	sbc	r23, r19
 aac:	84 0b       	sbc	r24, r20
 aae:	95 0b       	sbc	r25, r21
 ab0:	39 f4       	brne	.+14     	; 0xac0 <__fp_cmp+0x38>
 ab2:	0a 26       	eor	r0, r26
 ab4:	61 f0       	breq	.+24     	; 0xace <__fp_cmp+0x46>
 ab6:	23 2b       	or	r18, r19
 ab8:	24 2b       	or	r18, r20
 aba:	25 2b       	or	r18, r21
 abc:	21 f4       	brne	.+8      	; 0xac6 <__fp_cmp+0x3e>
 abe:	08 95       	ret
 ac0:	0a 26       	eor	r0, r26
 ac2:	09 f4       	brne	.+2      	; 0xac6 <__fp_cmp+0x3e>
 ac4:	a1 40       	sbci	r26, 0x01	; 1
 ac6:	a6 95       	lsr	r26
 ac8:	8f ef       	ldi	r24, 0xFF	; 255
 aca:	81 1d       	adc	r24, r1
 acc:	81 1d       	adc	r24, r1
 ace:	08 95       	ret

00000ad0 <__fp_inf>:
 ad0:	97 f9       	bld	r25, 7
 ad2:	9f 67       	ori	r25, 0x7F	; 127
 ad4:	80 e8       	ldi	r24, 0x80	; 128
 ad6:	70 e0       	ldi	r23, 0x00	; 0
 ad8:	60 e0       	ldi	r22, 0x00	; 0
 ada:	08 95       	ret

00000adc <__fp_nan>:
 adc:	9f ef       	ldi	r25, 0xFF	; 255
 ade:	80 ec       	ldi	r24, 0xC0	; 192
 ae0:	08 95       	ret

00000ae2 <__fp_pscA>:
 ae2:	00 24       	eor	r0, r0
 ae4:	0a 94       	dec	r0
 ae6:	16 16       	cp	r1, r22
 ae8:	17 06       	cpc	r1, r23
 aea:	18 06       	cpc	r1, r24
 aec:	09 06       	cpc	r0, r25
 aee:	08 95       	ret

00000af0 <__fp_pscB>:
 af0:	00 24       	eor	r0, r0
 af2:	0a 94       	dec	r0
 af4:	12 16       	cp	r1, r18
 af6:	13 06       	cpc	r1, r19
 af8:	14 06       	cpc	r1, r20
 afa:	05 06       	cpc	r0, r21
 afc:	08 95       	ret

00000afe <__fp_round>:
 afe:	09 2e       	mov	r0, r25
 b00:	03 94       	inc	r0
 b02:	00 0c       	add	r0, r0
 b04:	11 f4       	brne	.+4      	; 0xb0a <__fp_round+0xc>
 b06:	88 23       	and	r24, r24
 b08:	52 f0       	brmi	.+20     	; 0xb1e <__fp_round+0x20>
 b0a:	bb 0f       	add	r27, r27
 b0c:	40 f4       	brcc	.+16     	; 0xb1e <__fp_round+0x20>
 b0e:	bf 2b       	or	r27, r31
 b10:	11 f4       	brne	.+4      	; 0xb16 <__fp_round+0x18>
 b12:	60 ff       	sbrs	r22, 0
 b14:	04 c0       	rjmp	.+8      	; 0xb1e <__fp_round+0x20>
 b16:	6f 5f       	subi	r22, 0xFF	; 255
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	08 95       	ret

00000b20 <__fp_split3>:
 b20:	57 fd       	sbrc	r21, 7
 b22:	90 58       	subi	r25, 0x80	; 128
 b24:	44 0f       	add	r20, r20
 b26:	55 1f       	adc	r21, r21
 b28:	59 f0       	breq	.+22     	; 0xb40 <__fp_splitA+0x10>
 b2a:	5f 3f       	cpi	r21, 0xFF	; 255
 b2c:	71 f0       	breq	.+28     	; 0xb4a <__fp_splitA+0x1a>
 b2e:	47 95       	ror	r20

00000b30 <__fp_splitA>:
 b30:	88 0f       	add	r24, r24
 b32:	97 fb       	bst	r25, 7
 b34:	99 1f       	adc	r25, r25
 b36:	61 f0       	breq	.+24     	; 0xb50 <__fp_splitA+0x20>
 b38:	9f 3f       	cpi	r25, 0xFF	; 255
 b3a:	79 f0       	breq	.+30     	; 0xb5a <__fp_splitA+0x2a>
 b3c:	87 95       	ror	r24
 b3e:	08 95       	ret
 b40:	12 16       	cp	r1, r18
 b42:	13 06       	cpc	r1, r19
 b44:	14 06       	cpc	r1, r20
 b46:	55 1f       	adc	r21, r21
 b48:	f2 cf       	rjmp	.-28     	; 0xb2e <__fp_split3+0xe>
 b4a:	46 95       	lsr	r20
 b4c:	f1 df       	rcall	.-30     	; 0xb30 <__fp_splitA>
 b4e:	08 c0       	rjmp	.+16     	; 0xb60 <__fp_splitA+0x30>
 b50:	16 16       	cp	r1, r22
 b52:	17 06       	cpc	r1, r23
 b54:	18 06       	cpc	r1, r24
 b56:	99 1f       	adc	r25, r25
 b58:	f1 cf       	rjmp	.-30     	; 0xb3c <__fp_splitA+0xc>
 b5a:	86 95       	lsr	r24
 b5c:	71 05       	cpc	r23, r1
 b5e:	61 05       	cpc	r22, r1
 b60:	08 94       	sec
 b62:	08 95       	ret

00000b64 <__fp_zero>:
 b64:	e8 94       	clt

00000b66 <__fp_szero>:
 b66:	bb 27       	eor	r27, r27
 b68:	66 27       	eor	r22, r22
 b6a:	77 27       	eor	r23, r23
 b6c:	cb 01       	movw	r24, r22
 b6e:	97 f9       	bld	r25, 7
 b70:	08 95       	ret

00000b72 <__gesf2>:
 b72:	8a df       	rcall	.-236    	; 0xa88 <__fp_cmp>
 b74:	08 f4       	brcc	.+2      	; 0xb78 <__gesf2+0x6>
 b76:	8f ef       	ldi	r24, 0xFF	; 255
 b78:	08 95       	ret

00000b7a <__mulsf3>:
 b7a:	0b d0       	rcall	.+22     	; 0xb92 <__mulsf3x>
 b7c:	c0 cf       	rjmp	.-128    	; 0xafe <__fp_round>
 b7e:	b1 df       	rcall	.-158    	; 0xae2 <__fp_pscA>
 b80:	28 f0       	brcs	.+10     	; 0xb8c <__mulsf3+0x12>
 b82:	b6 df       	rcall	.-148    	; 0xaf0 <__fp_pscB>
 b84:	18 f0       	brcs	.+6      	; 0xb8c <__mulsf3+0x12>
 b86:	95 23       	and	r25, r21
 b88:	09 f0       	breq	.+2      	; 0xb8c <__mulsf3+0x12>
 b8a:	a2 cf       	rjmp	.-188    	; 0xad0 <__fp_inf>
 b8c:	a7 cf       	rjmp	.-178    	; 0xadc <__fp_nan>
 b8e:	11 24       	eor	r1, r1
 b90:	ea cf       	rjmp	.-44     	; 0xb66 <__fp_szero>

00000b92 <__mulsf3x>:
 b92:	c6 df       	rcall	.-116    	; 0xb20 <__fp_split3>
 b94:	a0 f3       	brcs	.-24     	; 0xb7e <__mulsf3+0x4>

00000b96 <__mulsf3_pse>:
 b96:	95 9f       	mul	r25, r21
 b98:	d1 f3       	breq	.-12     	; 0xb8e <__mulsf3+0x14>
 b9a:	95 0f       	add	r25, r21
 b9c:	50 e0       	ldi	r21, 0x00	; 0
 b9e:	55 1f       	adc	r21, r21
 ba0:	62 9f       	mul	r22, r18
 ba2:	f0 01       	movw	r30, r0
 ba4:	72 9f       	mul	r23, r18
 ba6:	bb 27       	eor	r27, r27
 ba8:	f0 0d       	add	r31, r0
 baa:	b1 1d       	adc	r27, r1
 bac:	63 9f       	mul	r22, r19
 bae:	aa 27       	eor	r26, r26
 bb0:	f0 0d       	add	r31, r0
 bb2:	b1 1d       	adc	r27, r1
 bb4:	aa 1f       	adc	r26, r26
 bb6:	64 9f       	mul	r22, r20
 bb8:	66 27       	eor	r22, r22
 bba:	b0 0d       	add	r27, r0
 bbc:	a1 1d       	adc	r26, r1
 bbe:	66 1f       	adc	r22, r22
 bc0:	82 9f       	mul	r24, r18
 bc2:	22 27       	eor	r18, r18
 bc4:	b0 0d       	add	r27, r0
 bc6:	a1 1d       	adc	r26, r1
 bc8:	62 1f       	adc	r22, r18
 bca:	73 9f       	mul	r23, r19
 bcc:	b0 0d       	add	r27, r0
 bce:	a1 1d       	adc	r26, r1
 bd0:	62 1f       	adc	r22, r18
 bd2:	83 9f       	mul	r24, r19
 bd4:	a0 0d       	add	r26, r0
 bd6:	61 1d       	adc	r22, r1
 bd8:	22 1f       	adc	r18, r18
 bda:	74 9f       	mul	r23, r20
 bdc:	33 27       	eor	r19, r19
 bde:	a0 0d       	add	r26, r0
 be0:	61 1d       	adc	r22, r1
 be2:	23 1f       	adc	r18, r19
 be4:	84 9f       	mul	r24, r20
 be6:	60 0d       	add	r22, r0
 be8:	21 1d       	adc	r18, r1
 bea:	82 2f       	mov	r24, r18
 bec:	76 2f       	mov	r23, r22
 bee:	6a 2f       	mov	r22, r26
 bf0:	11 24       	eor	r1, r1
 bf2:	9f 57       	subi	r25, 0x7F	; 127
 bf4:	50 40       	sbci	r21, 0x00	; 0
 bf6:	8a f0       	brmi	.+34     	; 0xc1a <__mulsf3_pse+0x84>
 bf8:	e1 f0       	breq	.+56     	; 0xc32 <__mulsf3_pse+0x9c>
 bfa:	88 23       	and	r24, r24
 bfc:	4a f0       	brmi	.+18     	; 0xc10 <__mulsf3_pse+0x7a>
 bfe:	ee 0f       	add	r30, r30
 c00:	ff 1f       	adc	r31, r31
 c02:	bb 1f       	adc	r27, r27
 c04:	66 1f       	adc	r22, r22
 c06:	77 1f       	adc	r23, r23
 c08:	88 1f       	adc	r24, r24
 c0a:	91 50       	subi	r25, 0x01	; 1
 c0c:	50 40       	sbci	r21, 0x00	; 0
 c0e:	a9 f7       	brne	.-22     	; 0xbfa <__mulsf3_pse+0x64>
 c10:	9e 3f       	cpi	r25, 0xFE	; 254
 c12:	51 05       	cpc	r21, r1
 c14:	70 f0       	brcs	.+28     	; 0xc32 <__mulsf3_pse+0x9c>
 c16:	5c cf       	rjmp	.-328    	; 0xad0 <__fp_inf>
 c18:	a6 cf       	rjmp	.-180    	; 0xb66 <__fp_szero>
 c1a:	5f 3f       	cpi	r21, 0xFF	; 255
 c1c:	ec f3       	brlt	.-6      	; 0xc18 <__mulsf3_pse+0x82>
 c1e:	98 3e       	cpi	r25, 0xE8	; 232
 c20:	dc f3       	brlt	.-10     	; 0xc18 <__mulsf3_pse+0x82>
 c22:	86 95       	lsr	r24
 c24:	77 95       	ror	r23
 c26:	67 95       	ror	r22
 c28:	b7 95       	ror	r27
 c2a:	f7 95       	ror	r31
 c2c:	e7 95       	ror	r30
 c2e:	9f 5f       	subi	r25, 0xFF	; 255
 c30:	c1 f7       	brne	.-16     	; 0xc22 <__mulsf3_pse+0x8c>
 c32:	fe 2b       	or	r31, r30
 c34:	88 0f       	add	r24, r24
 c36:	91 1d       	adc	r25, r1
 c38:	96 95       	lsr	r25
 c3a:	87 95       	ror	r24
 c3c:	97 f9       	bld	r25, 7
 c3e:	08 95       	ret

00000c40 <__umulhisi3>:
 c40:	a2 9f       	mul	r26, r18
 c42:	b0 01       	movw	r22, r0
 c44:	b3 9f       	mul	r27, r19
 c46:	c0 01       	movw	r24, r0
 c48:	a3 9f       	mul	r26, r19
 c4a:	70 0d       	add	r23, r0
 c4c:	81 1d       	adc	r24, r1
 c4e:	11 24       	eor	r1, r1
 c50:	91 1d       	adc	r25, r1
 c52:	b2 9f       	mul	r27, r18
 c54:	70 0d       	add	r23, r0
 c56:	81 1d       	adc	r24, r1
 c58:	11 24       	eor	r1, r1
 c5a:	91 1d       	adc	r25, r1
 c5c:	08 95       	ret

00000c5e <_exit>:
 c5e:	f8 94       	cli

00000c60 <__stop_program>:
 c60:	ff cf       	rjmp	.-2      	; 0xc60 <__stop_program>
