
omnicontrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000c00  00000c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010c  0080010c  00000ca0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000516  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000236  00000000  00000000  00001246  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fe  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  0000177c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fe  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000357  00000000  00000000  00001b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001e91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 ed 02 	jmp	0x5da	; 0x5da <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 31       	cpi	r26, 0x1F	; 31
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  9e:	0c 94 fe 05 	jmp	0xbfc	; 0xbfc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DCMotorStop>:
  a6:	10 92 b4 00 	sts	0x00B4, r1
  aa:	18 bc       	out	0x28, r1	; 40
  ac:	17 bc       	out	0x27, r1	; 39
  ae:	08 95       	ret

000000b0 <DCMotorSetup>:
  b0:	84 b5       	in	r24, 0x24	; 36
  b2:	83 6a       	ori	r24, 0xA3	; 163
  b4:	84 bd       	out	0x24, r24	; 36
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	85 bd       	out	0x25, r24	; 37
  bc:	e0 eb       	ldi	r30, 0xB0	; 176
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	83 62       	ori	r24, 0x23	; 35
  c4:	80 83       	st	Z, r24
  c6:	e1 eb       	ldi	r30, 0xB1	; 177
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	80 83       	st	Z, r24
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	88 6f       	ori	r24, 0xF8	; 248
  d4:	8a b9       	out	0x0a, r24	; 10
  d6:	20 9a       	sbi	0x04, 0	; 4
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <DCMotorStop>
  dc:	08 95       	ret

000000de <Timer1Init>:
}

void Timer1Init(void) {
	// Setup Timer/Counter1 in normal mode with prescaler of 8
	// At F_CPU = 16MHz, F_TIMER1 = 2MHz, and T_TIMER1 = 0.5 us
	TCCR1B |= (1 << CS11);
  de:	e1 e8       	ldi	r30, 0x81	; 129
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <shiftByteOut>:

void shiftByteOut(uint8_t byteOut)
{
	// Clear shift register pins
	// DATA = PD0, LATCH = PD1, CLK = PD2
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2));
  ea:	9b b1       	in	r25, 0x0b	; 11
  ec:	98 7f       	andi	r25, 0xF8	; 248
  ee:	9b b9       	out	0x0b, r25	; 11
	
	// Shift out serial data
	for(int i = 0; i < 8; i++)
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
	{
		// Sets data high if bit i is 1
		if(byteOut & (1 << i))
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	ac 01       	movw	r20, r24
  f8:	02 2e       	mov	r0, r18
  fa:	02 c0       	rjmp	.+4      	; 0x100 <shiftByteOut+0x16>
  fc:	55 95       	asr	r21
  fe:	47 95       	ror	r20
 100:	0a 94       	dec	r0
 102:	e2 f7       	brpl	.-8      	; 0xfc <shiftByteOut+0x12>
 104:	40 fd       	sbrc	r20, 0
		PORTD |= (1 << PORTD0);		// data high
 106:	58 9a       	sbi	0x0b, 0	; 11
		
		PORTD |= (1 << PORTD2);		// clock high
 108:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(1 << PORTD2);	// clock low
 10a:	5a 98       	cbi	0x0b, 2	; 11
		
		PORTD &= ~(1 << PORTD0);	// data low
 10c:	58 98       	cbi	0x0b, 0	; 11
	// Clear shift register pins
	// DATA = PD0, LATCH = PD1, CLK = PD2
	PORTD &= ~((1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2));
	
	// Shift out serial data
	for(int i = 0; i < 8; i++)
 10e:	2f 5f       	subi	r18, 0xFF	; 255
 110:	3f 4f       	sbci	r19, 0xFF	; 255
 112:	28 30       	cpi	r18, 0x08	; 8
 114:	31 05       	cpc	r19, r1
 116:	79 f7       	brne	.-34     	; 0xf6 <shiftByteOut+0xc>
		
		PORTD &= ~(1 << PORTD0);	// data low
	}
	
	// Display by latching to output pins
	PORTD |= (1 << PORTD1);			// latch high
 118:	59 9a       	sbi	0x0b, 1	; 11
	PORTD &= ~(1 << PORTD1);		// latch low
 11a:	59 98       	cbi	0x0b, 1	; 11
 11c:	08 95       	ret

0000011e <main>:
volatile uint8_t start_flag = 0;

void Timer1Init(void);
void shiftByteOut(uint8_t byteOut);

int main(void) {	
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	00 d0       	rcall	.+0      	; 0x124 <main+0x6>
 124:	00 d0       	rcall	.+0      	; 0x126 <main+0x8>
 126:	1f 92       	push	r1
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1 << PORTB1);	// Laser output pin, HIGH = laser on
 12c:	21 9a       	sbi	0x04, 1	; 4
	DDRD |= (1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2);	// Enable pins for shift register output
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	87 60       	ori	r24, 0x07	; 7
 132:	8a b9       	out	0x0a, r24	; 10
	uint16_t ledCount = 1;
	uint8_t ledPosition = 0;
	int8_t ledIncrement = -1;
	uint8_t ledDisplay = 0b00000001;

	DCMotorSetup();
 134:	0e 94 58 00 	call	0xb0	; 0xb0 <DCMotorSetup>
	Timer1Init();
 138:	0e 94 6f 00 	call	0xde	; 0xde <Timer1Init>
	
	// Enable external pin change interrupt 1 (PCINT1) for all 6 RC channels
	PCICR |= (1 << PCIE1);
 13c:	e8 e6       	ldi	r30, 0x68	; 104
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 60       	ori	r24, 0x02	; 2
 144:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11) | (1 << PCINT12) | (1 << PCINT13);
 146:	ec e6       	ldi	r30, 0x6C	; 108
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8f 63       	ori	r24, 0x3F	; 63
 14e:	80 83       	st	Z, r24
	sei();		// Set the Global Interrupt Enable flag so that interrupts can be processed
 150:	78 94       	sei
	
	// Knight Rider led variables
	uint16_t ledCount = 1;
	uint8_t ledPosition = 0;
	int8_t ledIncrement = -1;
	uint8_t ledDisplay = 0b00000001;
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	2b 83       	std	Y+3, r18	; 0x03
	DDRD |= (1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2);	// Enable pins for shift register output
	
	// Knight Rider led variables
	uint16_t ledCount = 1;
	uint8_t ledPosition = 0;
	int8_t ledIncrement = -1;
 156:	3f ef       	ldi	r19, 0xFF	; 255
 158:	3a 83       	std	Y+2, r19	; 0x02
	DDRB |= (1 << PORTB1);	// Laser output pin, HIGH = laser on
	DDRD |= (1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2);	// Enable pins for shift register output
	
	// Knight Rider led variables
	uint16_t ledCount = 1;
	uint8_t ledPosition = 0;
 15a:	19 82       	std	Y+1, r1	; 0x01
int main(void) {	
	DDRB |= (1 << PORTB1);	// Laser output pin, HIGH = laser on
	DDRD |= (1 << PORTD0) | (1 << PORTD1) | (1 << PORTD2);	// Enable pins for shift register output
	
	// Knight Rider led variables
	uint16_t ledCount = 1;
 15c:	01 e0       	ldi	r16, 0x01	; 1
 15e:	10 e0       	ldi	r17, 0x00	; 0
			ch1 = ch1 - 1500;	// Center at 0, in range [-500, +500]
			ch2 = ch2 - 1500;
			ch4 = ch4 - 1500;
		
			if(ch1 < -500) {
				ch1 = -500;
 160:	0f 2e       	mov	r0, r31
 162:	fc e0       	ldi	r31, 0x0C	; 12
 164:	2f 2e       	mov	r2, r31
 166:	fe ef       	ldi	r31, 0xFE	; 254
 168:	3f 2e       	mov	r3, r31
 16a:	f0 2d       	mov	r31, r0
	sei();		// Set the Global Interrupt Enable flag so that interrupts can be processed
	
	// Main loop
	while(1) {		
		// Only update motor speeds after each full cycle of RC pulses
		if(start_flag == 1) {
 16c:	80 91 0c 01 	lds	r24, 0x010C
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x4e>
			// Calculate velocity vector from channels 1 and 2
			// Channel 1 = vx, Channel 2 = vy
			ch1 = ch1 - 1500;	// Center at 0, in range [-500, +500]
 174:	80 91 0a 01 	lds	r24, 0x010A
 178:	90 91 0b 01 	lds	r25, 0x010B
 17c:	8c 5d       	subi	r24, 0xDC	; 220
 17e:	95 40       	sbci	r25, 0x05	; 5
 180:	90 93 0b 01 	sts	0x010B, r25
 184:	80 93 0a 01 	sts	0x010A, r24
			ch2 = ch2 - 1500;
 188:	80 91 08 01 	lds	r24, 0x0108
 18c:	90 91 09 01 	lds	r25, 0x0109
 190:	8c 5d       	subi	r24, 0xDC	; 220
 192:	95 40       	sbci	r25, 0x05	; 5
 194:	90 93 09 01 	sts	0x0109, r25
 198:	80 93 08 01 	sts	0x0108, r24
			ch4 = ch4 - 1500;
 19c:	80 91 04 01 	lds	r24, 0x0104
 1a0:	90 91 05 01 	lds	r25, 0x0105
 1a4:	8c 5d       	subi	r24, 0xDC	; 220
 1a6:	95 40       	sbci	r25, 0x05	; 5
 1a8:	90 93 05 01 	sts	0x0105, r25
 1ac:	80 93 04 01 	sts	0x0104, r24
		
			if(ch1 < -500) {
 1b0:	80 91 0a 01 	lds	r24, 0x010A
 1b4:	90 91 0b 01 	lds	r25, 0x010B
 1b8:	8c 30       	cpi	r24, 0x0C	; 12
 1ba:	9e 4f       	sbci	r25, 0xFE	; 254
 1bc:	2c f4       	brge	.+10     	; 0x1c8 <main+0xaa>
				ch1 = -500;
 1be:	30 92 0b 01 	sts	0x010B, r3
 1c2:	20 92 0a 01 	sts	0x010A, r2
 1c6:	0d c0       	rjmp	.+26     	; 0x1e2 <main+0xc4>
			} else if(ch1 > 500){
 1c8:	80 91 0a 01 	lds	r24, 0x010A
 1cc:	90 91 0b 01 	lds	r25, 0x010B
 1d0:	85 3f       	cpi	r24, 0xF5	; 245
 1d2:	91 40       	sbci	r25, 0x01	; 1
 1d4:	34 f0       	brlt	.+12     	; 0x1e2 <main+0xc4>
				ch1 = 500;
 1d6:	24 ef       	ldi	r18, 0xF4	; 244
 1d8:	31 e0       	ldi	r19, 0x01	; 1
 1da:	30 93 0b 01 	sts	0x010B, r19
 1de:	20 93 0a 01 	sts	0x010A, r18
			}
			if(ch2 < -500) {
 1e2:	80 91 08 01 	lds	r24, 0x0108
 1e6:	90 91 09 01 	lds	r25, 0x0109
 1ea:	8c 30       	cpi	r24, 0x0C	; 12
 1ec:	9e 4f       	sbci	r25, 0xFE	; 254
 1ee:	2c f4       	brge	.+10     	; 0x1fa <main+0xdc>
				ch2 = -500;
 1f0:	30 92 09 01 	sts	0x0109, r3
 1f4:	20 92 08 01 	sts	0x0108, r2
 1f8:	0d c0       	rjmp	.+26     	; 0x214 <main+0xf6>
			} else if(ch2 > 500){
 1fa:	80 91 08 01 	lds	r24, 0x0108
 1fe:	90 91 09 01 	lds	r25, 0x0109
 202:	85 3f       	cpi	r24, 0xF5	; 245
 204:	91 40       	sbci	r25, 0x01	; 1
 206:	34 f0       	brlt	.+12     	; 0x214 <main+0xf6>
				ch2 = 500;
 208:	24 ef       	ldi	r18, 0xF4	; 244
 20a:	31 e0       	ldi	r19, 0x01	; 1
 20c:	30 93 09 01 	sts	0x0109, r19
 210:	20 93 08 01 	sts	0x0108, r18
			}
			if(ch4 < -500) {
 214:	80 91 04 01 	lds	r24, 0x0104
 218:	90 91 05 01 	lds	r25, 0x0105
 21c:	8c 30       	cpi	r24, 0x0C	; 12
 21e:	9e 4f       	sbci	r25, 0xFE	; 254
 220:	2c f4       	brge	.+10     	; 0x22c <main+0x10e>
				ch4 = -500;
 222:	30 92 05 01 	sts	0x0105, r3
 226:	20 92 04 01 	sts	0x0104, r2
 22a:	0d c0       	rjmp	.+26     	; 0x246 <main+0x128>
			} else if(ch4 > 500){
 22c:	80 91 04 01 	lds	r24, 0x0104
 230:	90 91 05 01 	lds	r25, 0x0105
 234:	85 3f       	cpi	r24, 0xF5	; 245
 236:	91 40       	sbci	r25, 0x01	; 1
 238:	34 f0       	brlt	.+12     	; 0x246 <main+0x128>
				ch4 = 500;
 23a:	24 ef       	ldi	r18, 0xF4	; 244
 23c:	31 e0       	ldi	r19, 0x01	; 1
 23e:	30 93 05 01 	sts	0x0105, r19
 242:	20 93 04 01 	sts	0x0104, r18
			}
		
			float sqrt3_2 = sqrt(3.0)/2.0;
		
			// Check for a dead stick position
			if((abs(ch1) > 25) || (abs(ch2) > 25) || (abs(ch4) > 25)) {
 246:	80 91 0a 01 	lds	r24, 0x010A
 24a:	90 91 0b 01 	lds	r25, 0x010B
 24e:	99 23       	and	r25, r25
 250:	1c f4       	brge	.+6      	; 0x258 <main+0x13a>
 252:	91 95       	neg	r25
 254:	81 95       	neg	r24
 256:	91 09       	sbc	r25, r1
 258:	4a 97       	sbiw	r24, 0x1a	; 26
 25a:	bc f4       	brge	.+46     	; 0x28a <main+0x16c>
 25c:	80 91 08 01 	lds	r24, 0x0108
 260:	90 91 09 01 	lds	r25, 0x0109
 264:	99 23       	and	r25, r25
 266:	1c f4       	brge	.+6      	; 0x26e <main+0x150>
 268:	91 95       	neg	r25
 26a:	81 95       	neg	r24
 26c:	91 09       	sbc	r25, r1
 26e:	4a 97       	sbiw	r24, 0x1a	; 26
 270:	64 f4       	brge	.+24     	; 0x28a <main+0x16c>
 272:	80 91 04 01 	lds	r24, 0x0104
 276:	90 91 05 01 	lds	r25, 0x0105
 27a:	99 23       	and	r25, r25
 27c:	1c f4       	brge	.+6      	; 0x284 <main+0x166>
 27e:	91 95       	neg	r25
 280:	81 95       	neg	r24
 282:	91 09       	sbc	r25, r1
 284:	4a 97       	sbiw	r24, 0x1a	; 26
 286:	0c f4       	brge	.+2      	; 0x28a <main+0x16c>
 288:	43 c1       	rjmp	.+646    	; 0x510 <main+0x3f2>
				// Calculate raw wheel speeds and directions for translation
				float rawSpeed_A = -ch1;
 28a:	60 91 0a 01 	lds	r22, 0x010A
 28e:	70 91 0b 01 	lds	r23, 0x010B
 292:	71 95       	neg	r23
 294:	61 95       	neg	r22
 296:	71 09       	sbc	r23, r1
 298:	88 27       	eor	r24, r24
 29a:	77 fd       	sbrc	r23, 7
 29c:	80 95       	com	r24
 29e:	98 2f       	mov	r25, r24
 2a0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 2a4:	4b 01       	movw	r8, r22
 2a6:	5c 01       	movw	r10, r24
				float rawSpeed_B = 0.5*ch1 + sqrt3_2*ch2;
 2a8:	60 91 0a 01 	lds	r22, 0x010A
 2ac:	70 91 0b 01 	lds	r23, 0x010B
 2b0:	60 90 08 01 	lds	r6, 0x0108
 2b4:	70 90 09 01 	lds	r7, 0x0109
 2b8:	88 27       	eor	r24, r24
 2ba:	77 fd       	sbrc	r23, 7
 2bc:	80 95       	com	r24
 2be:	98 2f       	mov	r25, r24
 2c0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	5f e3       	ldi	r21, 0x3F	; 63
 2cc:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 2d0:	6b 01       	movw	r12, r22
 2d2:	7c 01       	movw	r14, r24
 2d4:	b3 01       	movw	r22, r6
 2d6:	88 27       	eor	r24, r24
 2d8:	77 fd       	sbrc	r23, 7
 2da:	80 95       	com	r24
 2dc:	98 2f       	mov	r25, r24
 2de:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 2e2:	27 ed       	ldi	r18, 0xD7	; 215
 2e4:	33 eb       	ldi	r19, 0xB3	; 179
 2e6:	4d e5       	ldi	r20, 0x5D	; 93
 2e8:	5f e3       	ldi	r21, 0x3F	; 63
 2ea:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 2ee:	9b 01       	movw	r18, r22
 2f0:	ac 01       	movw	r20, r24
 2f2:	c7 01       	movw	r24, r14
 2f4:	b6 01       	movw	r22, r12
 2f6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__addsf3>
 2fa:	6b 01       	movw	r12, r22
 2fc:	7c 01       	movw	r14, r24
				float rawSpeed_C = 0.5*ch1 - sqrt3_2*ch2;
 2fe:	60 91 0a 01 	lds	r22, 0x010A
 302:	70 91 0b 01 	lds	r23, 0x010B
 306:	80 91 08 01 	lds	r24, 0x0108
 30a:	90 91 09 01 	lds	r25, 0x0109
 30e:	9d 83       	std	Y+5, r25	; 0x05
 310:	8c 83       	std	Y+4, r24	; 0x04
 312:	88 27       	eor	r24, r24
 314:	77 fd       	sbrc	r23, 7
 316:	80 95       	com	r24
 318:	98 2f       	mov	r25, r24
 31a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	5f e3       	ldi	r21, 0x3F	; 63
 326:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 32a:	2b 01       	movw	r4, r22
 32c:	3c 01       	movw	r6, r24
 32e:	ec 81       	ldd	r30, Y+4	; 0x04
 330:	fd 81       	ldd	r31, Y+5	; 0x05
 332:	bf 01       	movw	r22, r30
 334:	88 27       	eor	r24, r24
 336:	77 fd       	sbrc	r23, 7
 338:	80 95       	com	r24
 33a:	98 2f       	mov	r25, r24
 33c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 340:	27 ed       	ldi	r18, 0xD7	; 215
 342:	33 eb       	ldi	r19, 0xB3	; 179
 344:	4d e5       	ldi	r20, 0x5D	; 93
 346:	5f e3       	ldi	r21, 0x3F	; 63
 348:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 34c:	9b 01       	movw	r18, r22
 34e:	ac 01       	movw	r20, r24
 350:	c3 01       	movw	r24, r6
 352:	b2 01       	movw	r22, r4
 354:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__subsf3>
 358:	2b 01       	movw	r4, r22
 35a:	3c 01       	movw	r6, r24
			
				// Add in rotation
				if(abs(ch4) > 25) {
 35c:	80 91 04 01 	lds	r24, 0x0104
 360:	90 91 05 01 	lds	r25, 0x0105
 364:	99 23       	and	r25, r25
 366:	1c f4       	brge	.+6      	; 0x36e <main+0x250>
 368:	91 95       	neg	r25
 36a:	81 95       	neg	r24
 36c:	91 09       	sbc	r25, r1
 36e:	4a 97       	sbiw	r24, 0x1a	; 26
 370:	b4 f1       	brlt	.+108    	; 0x3de <main+0x2c0>
					rawSpeed_A = rawSpeed_A - ch4;
 372:	60 91 04 01 	lds	r22, 0x0104
 376:	70 91 05 01 	lds	r23, 0x0105
 37a:	88 27       	eor	r24, r24
 37c:	77 fd       	sbrc	r23, 7
 37e:	80 95       	com	r24
 380:	98 2f       	mov	r25, r24
 382:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 386:	9b 01       	movw	r18, r22
 388:	ac 01       	movw	r20, r24
 38a:	c5 01       	movw	r24, r10
 38c:	b4 01       	movw	r22, r8
 38e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__subsf3>
 392:	4b 01       	movw	r8, r22
 394:	5c 01       	movw	r10, r24
					rawSpeed_B = rawSpeed_B - ch4;
 396:	60 91 04 01 	lds	r22, 0x0104
 39a:	70 91 05 01 	lds	r23, 0x0105
 39e:	88 27       	eor	r24, r24
 3a0:	77 fd       	sbrc	r23, 7
 3a2:	80 95       	com	r24
 3a4:	98 2f       	mov	r25, r24
 3a6:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 3aa:	9b 01       	movw	r18, r22
 3ac:	ac 01       	movw	r20, r24
 3ae:	c7 01       	movw	r24, r14
 3b0:	b6 01       	movw	r22, r12
 3b2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__subsf3>
 3b6:	6b 01       	movw	r12, r22
 3b8:	7c 01       	movw	r14, r24
					rawSpeed_C = rawSpeed_C - ch4;
 3ba:	60 91 04 01 	lds	r22, 0x0104
 3be:	70 91 05 01 	lds	r23, 0x0105
 3c2:	88 27       	eor	r24, r24
 3c4:	77 fd       	sbrc	r23, 7
 3c6:	80 95       	com	r24
 3c8:	98 2f       	mov	r25, r24
 3ca:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__floatsisf>
 3ce:	9b 01       	movw	r18, r22
 3d0:	ac 01       	movw	r20, r24
 3d2:	c3 01       	movw	r24, r6
 3d4:	b2 01       	movw	r22, r4
 3d6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__subsf3>
 3da:	2b 01       	movw	r4, r22
 3dc:	3c 01       	movw	r6, r24
				}
			
				// Set motor directions
				if(rawSpeed_A < 0) {
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	a9 01       	movw	r20, r18
 3e4:	c5 01       	movw	r24, r10
 3e6:	b4 01       	movw	r22, r8
 3e8:	0e 94 39 04 	call	0x872	; 0x872 <__cmpsf2>
 3ec:	88 23       	and	r24, r24
 3ee:	14 f4       	brge	.+4      	; 0x3f4 <main+0x2d6>
					MotorA_CCW();
 3f0:	5c 98       	cbi	0x0b, 4	; 11
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <main+0x2d8>
				} else MotorA_CW();
 3f4:	5c 9a       	sbi	0x0b, 4	; 11
		
				if(rawSpeed_B < 0) {
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	a9 01       	movw	r20, r18
 3fc:	c7 01       	movw	r24, r14
 3fe:	b6 01       	movw	r22, r12
 400:	0e 94 39 04 	call	0x872	; 0x872 <__cmpsf2>
 404:	88 23       	and	r24, r24
 406:	14 f4       	brge	.+4      	; 0x40c <main+0x2ee>
					MotorB_CCW();
 408:	28 98       	cbi	0x05, 0	; 5
 40a:	01 c0       	rjmp	.+2      	; 0x40e <main+0x2f0>
				} else MotorB_CW();
 40c:	28 9a       	sbi	0x05, 0	; 5
		
				if(rawSpeed_C < 0) {
 40e:	20 e0       	ldi	r18, 0x00	; 0
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	a9 01       	movw	r20, r18
 414:	c3 01       	movw	r24, r6
 416:	b2 01       	movw	r22, r4
 418:	0e 94 39 04 	call	0x872	; 0x872 <__cmpsf2>
 41c:	88 23       	and	r24, r24
 41e:	14 f4       	brge	.+4      	; 0x424 <main+0x306>
					MotorC_CCW();
 420:	5f 98       	cbi	0x0b, 7	; 11
 422:	01 c0       	rjmp	.+2      	; 0x426 <main+0x308>
				} else MotorC_CW();
 424:	5f 9a       	sbi	0x0b, 7	; 11
			
				rawSpeed_A = fabs(rawSpeed_A);
 426:	e8 94       	clt
 428:	b7 f8       	bld	r11, 7
				rawSpeed_B = fabs(rawSpeed_B);
 42a:	e8 94       	clt
 42c:	f7 f8       	bld	r15, 7
				rawSpeed_C = fabs(rawSpeed_C);
 42e:	e8 94       	clt
 430:	77 f8       	bld	r7, 7
			
				if(rawSpeed_A > 500) {
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	4a ef       	ldi	r20, 0xFA	; 250
 438:	53 e4       	ldi	r21, 0x43	; 67
 43a:	c5 01       	movw	r24, r10
 43c:	b4 01       	movw	r22, r8
 43e:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 442:	18 16       	cp	r1, r24
 444:	44 f4       	brge	.+16     	; 0x456 <main+0x338>
					rawSpeed_A = 500;
 446:	0f 2e       	mov	r0, r31
 448:	81 2c       	mov	r8, r1
 44a:	91 2c       	mov	r9, r1
 44c:	fa ef       	ldi	r31, 0xFA	; 250
 44e:	af 2e       	mov	r10, r31
 450:	f3 e4       	ldi	r31, 0x43	; 67
 452:	bf 2e       	mov	r11, r31
 454:	f0 2d       	mov	r31, r0
				}
				if(rawSpeed_B > 500) {
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	4a ef       	ldi	r20, 0xFA	; 250
 45c:	53 e4       	ldi	r21, 0x43	; 67
 45e:	c7 01       	movw	r24, r14
 460:	b6 01       	movw	r22, r12
 462:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 466:	18 16       	cp	r1, r24
 468:	44 f4       	brge	.+16     	; 0x47a <main+0x35c>
					rawSpeed_B = 500;
 46a:	0f 2e       	mov	r0, r31
 46c:	c1 2c       	mov	r12, r1
 46e:	d1 2c       	mov	r13, r1
 470:	fa ef       	ldi	r31, 0xFA	; 250
 472:	ef 2e       	mov	r14, r31
 474:	f3 e4       	ldi	r31, 0x43	; 67
 476:	ff 2e       	mov	r15, r31
 478:	f0 2d       	mov	r31, r0
				}
				if(rawSpeed_C > 500) {
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	4a ef       	ldi	r20, 0xFA	; 250
 480:	53 e4       	ldi	r21, 0x43	; 67
 482:	c3 01       	movw	r24, r6
 484:	b2 01       	movw	r22, r4
 486:	0e 94 88 05 	call	0xb10	; 0xb10 <__gesf2>
 48a:	18 16       	cp	r1, r24
 48c:	44 f4       	brge	.+16     	; 0x49e <main+0x380>
					rawSpeed_C = 500;
 48e:	0f 2e       	mov	r0, r31
 490:	41 2c       	mov	r4, r1
 492:	51 2c       	mov	r5, r1
 494:	fa ef       	ldi	r31, 0xFA	; 250
 496:	6f 2e       	mov	r6, r31
 498:	f3 e4       	ldi	r31, 0x43	; 67
 49a:	7f 2e       	mov	r7, r31
 49c:	f0 2d       	mov	r31, r0
				}
		
				// Set motor speeds
				// Map from [0,500] to [155,255]
				SPEED_A = 155 + (int)(rawSpeed_A*100/500);
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	48 ec       	ldi	r20, 0xC8	; 200
 4a4:	52 e4       	ldi	r21, 0x42	; 66
 4a6:	c5 01       	movw	r24, r10
 4a8:	b4 01       	movw	r22, r8
 4aa:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	4a ef       	ldi	r20, 0xFA	; 250
 4b4:	53 e4       	ldi	r21, 0x43	; 67
 4b6:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
 4ba:	0e 94 a5 04 	call	0x94a	; 0x94a <__fixsfsi>
 4be:	65 56       	subi	r22, 0x65	; 101
 4c0:	e4 eb       	ldi	r30, 0xB4	; 180
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	60 83       	st	Z, r22
				SPEED_B = 155 + (int)(rawSpeed_B*100/500);
 4c6:	20 e0       	ldi	r18, 0x00	; 0
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	48 ec       	ldi	r20, 0xC8	; 200
 4cc:	52 e4       	ldi	r21, 0x42	; 66
 4ce:	c7 01       	movw	r24, r14
 4d0:	b6 01       	movw	r22, r12
 4d2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	4a ef       	ldi	r20, 0xFA	; 250
 4dc:	53 e4       	ldi	r21, 0x43	; 67
 4de:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
 4e2:	0e 94 a5 04 	call	0x94a	; 0x94a <__fixsfsi>
 4e6:	65 56       	subi	r22, 0x65	; 101
 4e8:	68 bd       	out	0x28, r22	; 40
				SPEED_C = 155 + (int)(rawSpeed_C*100/500);
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	48 ec       	ldi	r20, 0xC8	; 200
 4f0:	52 e4       	ldi	r21, 0x42	; 66
 4f2:	c3 01       	movw	r24, r6
 4f4:	b2 01       	movw	r22, r4
 4f6:	0e 94 8c 05 	call	0xb18	; 0xb18 <__mulsf3>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	4a ef       	ldi	r20, 0xFA	; 250
 500:	53 e4       	ldi	r21, 0x43	; 67
 502:	0e 94 3d 04 	call	0x87a	; 0x87a <__divsf3>
 506:	0e 94 a5 04 	call	0x94a	; 0x94a <__fixsfsi>
 50a:	65 56       	subi	r22, 0x65	; 101
 50c:	67 bd       	out	0x27, r22	; 39
			}
		
			float sqrt3_2 = sqrt(3.0)/2.0;
		
			// Check for a dead stick position
			if((abs(ch1) > 25) || (abs(ch2) > 25) || (abs(ch4) > 25)) {
 50e:	02 c0       	rjmp	.+4      	; 0x514 <main+0x3f6>
				SPEED_A = 155 + (int)(rawSpeed_A*100/500);
				SPEED_B = 155 + (int)(rawSpeed_B*100/500);
				SPEED_C = 155 + (int)(rawSpeed_C*100/500);
			
			} else {
				DCMotorStop();
 510:	0e 94 53 00 	call	0xa6	; 0xa6 <DCMotorStop>
			}
			
			// Turn laser on (Ch5 > 1500) or off (Ch5 < 1500)
			if(ch5 > 1500) {
 514:	80 91 02 01 	lds	r24, 0x0102
 518:	90 91 03 01 	lds	r25, 0x0103
 51c:	8d 3d       	cpi	r24, 0xDD	; 221
 51e:	95 40       	sbci	r25, 0x05	; 5
 520:	14 f0       	brlt	.+4      	; 0x526 <main+0x408>
				PORTB |= (1 << PORTB1);
 522:	29 9a       	sbi	0x05, 1	; 5
 524:	01 c0       	rjmp	.+2      	; 0x528 <main+0x40a>
			} else {
				PORTB &= ~(1 << PORTB1);
 526:	29 98       	cbi	0x05, 1	; 5
			}
			
			// Knight Rider LEDs
			if((ledCount % 5) == 0) {
 528:	98 01       	movw	r18, r16
 52a:	ad ec       	ldi	r26, 0xCD	; 205
 52c:	bc ec       	ldi	r27, 0xCC	; 204
 52e:	0e 94 ef 05 	call	0xbde	; 0xbde <__umulhisi3>
 532:	96 95       	lsr	r25
 534:	87 95       	ror	r24
 536:	96 95       	lsr	r25
 538:	87 95       	ror	r24
 53a:	9c 01       	movw	r18, r24
 53c:	22 0f       	add	r18, r18
 53e:	33 1f       	adc	r19, r19
 540:	22 0f       	add	r18, r18
 542:	33 1f       	adc	r19, r19
 544:	82 0f       	add	r24, r18
 546:	93 1f       	adc	r25, r19
 548:	08 17       	cp	r16, r24
 54a:	19 07       	cpc	r17, r25
 54c:	c9 f4       	brne	.+50     	; 0x580 <main+0x462>
				shiftByteOut(ledDisplay);
 54e:	8b 81       	ldd	r24, Y+3	; 0x03
 550:	0e 94 75 00 	call	0xea	; 0xea <shiftByteOut>
				if((ledPosition == 0) || (ledPosition == 7)) {
 554:	29 81       	ldd	r18, Y+1	; 0x01
 556:	22 23       	and	r18, r18
 558:	11 f0       	breq	.+4      	; 0x55e <main+0x440>
 55a:	27 30       	cpi	r18, 0x07	; 7
 55c:	19 f4       	brne	.+6      	; 0x564 <main+0x446>
					ledIncrement = -ledIncrement;
 55e:	3a 81       	ldd	r19, Y+2	; 0x02
 560:	31 95       	neg	r19
 562:	3a 83       	std	Y+2, r19	; 0x02
				}
				ledPosition += ledIncrement;
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	9a 81       	ldd	r25, Y+2	; 0x02
 568:	89 0f       	add	r24, r25
 56a:	89 83       	std	Y+1, r24	; 0x01
				ledDisplay = (1 << ledPosition);
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	09 80       	ldd	r0, Y+1	; 0x01
 570:	01 c0       	rjmp	.+2      	; 0x574 <main+0x456>
 572:	88 0f       	add	r24, r24
 574:	0a 94       	dec	r0
 576:	ea f7       	brpl	.-6      	; 0x572 <main+0x454>
 578:	8b 83       	std	Y+3, r24	; 0x03
				ledCount = 1;
 57a:	01 e0       	ldi	r16, 0x01	; 1
 57c:	10 e0       	ldi	r17, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <main+0x466>
			} else {
				ledCount++;
 580:	0f 5f       	subi	r16, 0xFF	; 255
 582:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			
			// Check for laser hit
			if((PINB & (1 << PORTB2)) == 0) {
 584:	1a 99       	sbic	0x03, 2	; 3
 586:	26 c0       	rjmp	.+76     	; 0x5d4 <main+0x4b6>
				DCMotorStop();				// Turn off motors
 588:	0e 94 53 00 	call	0xa6	; 0xa6 <DCMotorStop>
				PORTB &= ~(1 << PORTB1);	// Turn off laser
 58c:	29 98       	cbi	0x05, 1	; 5
 58e:	0f 2e       	mov	r0, r31
 590:	fa e0       	ldi	r31, 0x0A	; 10
 592:	ef 2e       	mov	r14, r31
 594:	f0 2d       	mov	r31, r0
 596:	f1 2c       	mov	r15, r1
				// Lock up and flash LEDs
				for(int i = 0; i < 10; i++) {
					shiftByteOut(0b11111111);
 598:	8f ef       	ldi	r24, 0xFF	; 255
 59a:	0e 94 75 00 	call	0xea	; 0xea <shiftByteOut>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59e:	ef ef       	ldi	r30, 0xFF	; 255
 5a0:	f4 e3       	ldi	r31, 0x34	; 52
 5a2:	2c e0       	ldi	r18, 0x0C	; 12
 5a4:	e1 50       	subi	r30, 0x01	; 1
 5a6:	f0 40       	sbci	r31, 0x00	; 0
 5a8:	20 40       	sbci	r18, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x486>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x490>
 5ae:	00 00       	nop
					_delay_ms(250);
					shiftByteOut(0b00000000);
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 75 00 	call	0xea	; 0xea <shiftByteOut>
 5b6:	3f ef       	ldi	r19, 0xFF	; 255
 5b8:	84 e3       	ldi	r24, 0x34	; 52
 5ba:	9c e0       	ldi	r25, 0x0C	; 12
 5bc:	31 50       	subi	r19, 0x01	; 1
 5be:	80 40       	sbci	r24, 0x00	; 0
 5c0:	90 40       	sbci	r25, 0x00	; 0
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <main+0x49e>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <main+0x4a8>
 5c6:	00 00       	nop
 5c8:	e1 e0       	ldi	r30, 0x01	; 1
 5ca:	ee 1a       	sub	r14, r30
 5cc:	f1 08       	sbc	r15, r1
			// Check for laser hit
			if((PINB & (1 << PORTB2)) == 0) {
				DCMotorStop();				// Turn off motors
				PORTB &= ~(1 << PORTB1);	// Turn off laser
				// Lock up and flash LEDs
				for(int i = 0; i < 10; i++) {
 5ce:	e1 14       	cp	r14, r1
 5d0:	f1 04       	cpc	r15, r1
 5d2:	11 f7       	brne	.-60     	; 0x598 <main+0x47a>
					shiftByteOut(0b00000000);
					_delay_ms(250);
				}
			}
			
			start_flag = 0;		// Reset flag after speeds have updated
 5d4:	10 92 0c 01 	sts	0x010C, r1
 5d8:	c9 cd       	rjmp	.-1134   	; 0x16c <main+0x4e>

000005da <__vector_4>:
	PORTD |= (1 << PORTD1);			// latch high
	PORTD &= ~(1 << PORTD1);		// latch low
	return;
}

ISR (PCINT1_vect) {
 5da:	1f 92       	push	r1
 5dc:	0f 92       	push	r0
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	0f 92       	push	r0
 5e2:	11 24       	eor	r1, r1
 5e4:	2f 93       	push	r18
 5e6:	3f 93       	push	r19
 5e8:	4f 93       	push	r20
 5ea:	5f 93       	push	r21
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
	// Read six RC channels on PC0/PCINT8 (Ch1) to PC5/PCINT13 (Ch6)
	// Check to see if it is a rising edge for each channel to start timing
	// Falling edge to stop timing
	uint16_t currentTime = TCNT1 / 2;		// Read Timer/Counter1 in microseconds
 5f0:	80 91 84 00 	lds	r24, 0x0084
 5f4:	90 91 85 00 	lds	r25, 0x0085
 5f8:	96 95       	lsr	r25
 5fa:	87 95       	ror	r24
	
	if(PINC & (1 << PORTC0)) {		// Channel 1
 5fc:	30 9b       	sbis	0x06, 0	; 6
 5fe:	12 c0       	rjmp	.+36     	; 0x624 <__vector_4+0x4a>
		if(ch1_state == 0) {
 600:	20 91 12 01 	lds	r18, 0x0112
 604:	21 11       	cpse	r18, r1
 606:	21 c0       	rjmp	.+66     	; 0x64a <__vector_4+0x70>
			TCNT1 = 0;			// Reset timer at start of ch1 only
 608:	10 92 85 00 	sts	0x0085, r1
 60c:	10 92 84 00 	sts	0x0084, r1
			ch1_start = 0;
 610:	10 92 1e 01 	sts	0x011E, r1
 614:	10 92 1d 01 	sts	0x011D, r1
			ch1_state = 1;
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	20 93 12 01 	sts	0x0112, r18
			start_flag = 1;		// Set flag to update motor speeds & directions
 61e:	20 93 0c 01 	sts	0x010C, r18
 622:	13 c0       	rjmp	.+38     	; 0x64a <__vector_4+0x70>
		}
	} else if((PINC & (1 << PORTC0)) == 0) {
 624:	30 99       	sbic	0x06, 0	; 6
 626:	11 c0       	rjmp	.+34     	; 0x64a <__vector_4+0x70>
		if(ch1_state == 1) {
 628:	20 91 12 01 	lds	r18, 0x0112
 62c:	21 30       	cpi	r18, 0x01	; 1
 62e:	69 f4       	brne	.+26     	; 0x64a <__vector_4+0x70>
			ch1 = currentTime - ch1_start;
 630:	20 91 1d 01 	lds	r18, 0x011D
 634:	30 91 1e 01 	lds	r19, 0x011E
 638:	ac 01       	movw	r20, r24
 63a:	42 1b       	sub	r20, r18
 63c:	53 0b       	sbc	r21, r19
 63e:	50 93 0b 01 	sts	0x010B, r21
 642:	40 93 0a 01 	sts	0x010A, r20
			ch1_state = 0;
 646:	10 92 12 01 	sts	0x0112, r1
		}
	}
	
	if(PINC & (1 << PORTC1)) {		//Channel 2
 64a:	31 9b       	sbis	0x06, 1	; 6
 64c:	0c c0       	rjmp	.+24     	; 0x666 <__vector_4+0x8c>
		if(ch2_state == 0) {
 64e:	20 91 11 01 	lds	r18, 0x0111
 652:	21 11       	cpse	r18, r1
 654:	1b c0       	rjmp	.+54     	; 0x68c <__vector_4+0xb2>
			ch2_start = currentTime;
 656:	90 93 1c 01 	sts	0x011C, r25
 65a:	80 93 1b 01 	sts	0x011B, r24
			ch2_state = 1;
 65e:	21 e0       	ldi	r18, 0x01	; 1
 660:	20 93 11 01 	sts	0x0111, r18
 664:	13 c0       	rjmp	.+38     	; 0x68c <__vector_4+0xb2>
		}
	} else if((PINC & (1 << PORTC1)) == 0) {
 666:	31 99       	sbic	0x06, 1	; 6
 668:	11 c0       	rjmp	.+34     	; 0x68c <__vector_4+0xb2>
		if(ch2_state == 1) {
 66a:	20 91 11 01 	lds	r18, 0x0111
 66e:	21 30       	cpi	r18, 0x01	; 1
 670:	69 f4       	brne	.+26     	; 0x68c <__vector_4+0xb2>
			ch2 = currentTime - ch2_start;
 672:	20 91 1b 01 	lds	r18, 0x011B
 676:	30 91 1c 01 	lds	r19, 0x011C
 67a:	ac 01       	movw	r20, r24
 67c:	42 1b       	sub	r20, r18
 67e:	53 0b       	sbc	r21, r19
 680:	50 93 09 01 	sts	0x0109, r21
 684:	40 93 08 01 	sts	0x0108, r20
			ch2_state = 0;
 688:	10 92 11 01 	sts	0x0111, r1
		}
	}
	
	if(PINC & (1 << PORTC2)) {		//Channel 3
 68c:	32 9b       	sbis	0x06, 2	; 6
 68e:	0c c0       	rjmp	.+24     	; 0x6a8 <__vector_4+0xce>
		if(ch3_state == 0) {
 690:	20 91 10 01 	lds	r18, 0x0110
 694:	21 11       	cpse	r18, r1
 696:	1b c0       	rjmp	.+54     	; 0x6ce <__vector_4+0xf4>
			ch3_start = currentTime;
 698:	90 93 1a 01 	sts	0x011A, r25
 69c:	80 93 19 01 	sts	0x0119, r24
			ch3_state = 1;
 6a0:	21 e0       	ldi	r18, 0x01	; 1
 6a2:	20 93 10 01 	sts	0x0110, r18
 6a6:	13 c0       	rjmp	.+38     	; 0x6ce <__vector_4+0xf4>
		}
	} else if((PINC & (1 << PORTC2)) == 0) {
 6a8:	32 99       	sbic	0x06, 2	; 6
 6aa:	11 c0       	rjmp	.+34     	; 0x6ce <__vector_4+0xf4>
		if(ch3_state == 1) {
 6ac:	20 91 10 01 	lds	r18, 0x0110
 6b0:	21 30       	cpi	r18, 0x01	; 1
 6b2:	69 f4       	brne	.+26     	; 0x6ce <__vector_4+0xf4>
			ch3 = currentTime - ch3_start;
 6b4:	20 91 19 01 	lds	r18, 0x0119
 6b8:	30 91 1a 01 	lds	r19, 0x011A
 6bc:	ac 01       	movw	r20, r24
 6be:	42 1b       	sub	r20, r18
 6c0:	53 0b       	sbc	r21, r19
 6c2:	50 93 07 01 	sts	0x0107, r21
 6c6:	40 93 06 01 	sts	0x0106, r20
			ch3_state = 0;
 6ca:	10 92 10 01 	sts	0x0110, r1
		}
	}
	
	if(PINC & (1 << PORTC3)) {		//Channel 4
 6ce:	33 9b       	sbis	0x06, 3	; 6
 6d0:	0c c0       	rjmp	.+24     	; 0x6ea <__vector_4+0x110>
		if(ch4_state == 0) {
 6d2:	20 91 0f 01 	lds	r18, 0x010F
 6d6:	21 11       	cpse	r18, r1
 6d8:	1b c0       	rjmp	.+54     	; 0x710 <__vector_4+0x136>
			ch4_start = currentTime;
 6da:	90 93 18 01 	sts	0x0118, r25
 6de:	80 93 17 01 	sts	0x0117, r24
			ch4_state = 1;
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	20 93 0f 01 	sts	0x010F, r18
 6e8:	13 c0       	rjmp	.+38     	; 0x710 <__vector_4+0x136>
		}
	} else if((PINC & (1 << PORTC3)) == 0) {
 6ea:	33 99       	sbic	0x06, 3	; 6
 6ec:	11 c0       	rjmp	.+34     	; 0x710 <__vector_4+0x136>
		if(ch4_state == 1) {
 6ee:	20 91 0f 01 	lds	r18, 0x010F
 6f2:	21 30       	cpi	r18, 0x01	; 1
 6f4:	69 f4       	brne	.+26     	; 0x710 <__vector_4+0x136>
			ch4 = currentTime - ch4_start;
 6f6:	20 91 17 01 	lds	r18, 0x0117
 6fa:	30 91 18 01 	lds	r19, 0x0118
 6fe:	ac 01       	movw	r20, r24
 700:	42 1b       	sub	r20, r18
 702:	53 0b       	sbc	r21, r19
 704:	50 93 05 01 	sts	0x0105, r21
 708:	40 93 04 01 	sts	0x0104, r20
			ch4_state = 0;
 70c:	10 92 0f 01 	sts	0x010F, r1
		}
	}
	
	if(PINC & (1 << PORTC4)) {		//Channel 5
 710:	34 9b       	sbis	0x06, 4	; 6
 712:	0c c0       	rjmp	.+24     	; 0x72c <__vector_4+0x152>
		if(ch5_state == 0) {
 714:	20 91 0e 01 	lds	r18, 0x010E
 718:	21 11       	cpse	r18, r1
 71a:	1b c0       	rjmp	.+54     	; 0x752 <__vector_4+0x178>
			ch5_start = currentTime;
 71c:	90 93 16 01 	sts	0x0116, r25
 720:	80 93 15 01 	sts	0x0115, r24
			ch5_state = 1;
 724:	21 e0       	ldi	r18, 0x01	; 1
 726:	20 93 0e 01 	sts	0x010E, r18
 72a:	13 c0       	rjmp	.+38     	; 0x752 <__vector_4+0x178>
		}
	} else if((PINC & (1 << PORTC4)) == 0) {
 72c:	34 99       	sbic	0x06, 4	; 6
 72e:	11 c0       	rjmp	.+34     	; 0x752 <__vector_4+0x178>
		if(ch5_state == 1) {
 730:	20 91 0e 01 	lds	r18, 0x010E
 734:	21 30       	cpi	r18, 0x01	; 1
 736:	69 f4       	brne	.+26     	; 0x752 <__vector_4+0x178>
			ch5 = currentTime - ch5_start;
 738:	20 91 15 01 	lds	r18, 0x0115
 73c:	30 91 16 01 	lds	r19, 0x0116
 740:	ac 01       	movw	r20, r24
 742:	42 1b       	sub	r20, r18
 744:	53 0b       	sbc	r21, r19
 746:	50 93 03 01 	sts	0x0103, r21
 74a:	40 93 02 01 	sts	0x0102, r20
			ch5_state = 0;
 74e:	10 92 0e 01 	sts	0x010E, r1
		}
	}
	
	if(PINC & (1 << PORTC5)) {		//Channel 6
 752:	35 9b       	sbis	0x06, 5	; 6
 754:	0c c0       	rjmp	.+24     	; 0x76e <__vector_4+0x194>
		if(ch6_state == 0) {
 756:	20 91 0d 01 	lds	r18, 0x010D
 75a:	21 11       	cpse	r18, r1
 75c:	1a c0       	rjmp	.+52     	; 0x792 <__vector_4+0x1b8>
			ch6_start = currentTime;
 75e:	90 93 14 01 	sts	0x0114, r25
 762:	80 93 13 01 	sts	0x0113, r24
			ch6_state = 1;
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	80 93 0d 01 	sts	0x010D, r24
 76c:	12 c0       	rjmp	.+36     	; 0x792 <__vector_4+0x1b8>
		}
	} else if((PINC & (1 << PORTC5)) == 0) {
 76e:	35 99       	sbic	0x06, 5	; 6
 770:	10 c0       	rjmp	.+32     	; 0x792 <__vector_4+0x1b8>
		if(ch6_state == 1) {
 772:	20 91 0d 01 	lds	r18, 0x010D
 776:	21 30       	cpi	r18, 0x01	; 1
 778:	61 f4       	brne	.+24     	; 0x792 <__vector_4+0x1b8>
			ch6 = currentTime - ch6_start;
 77a:	20 91 13 01 	lds	r18, 0x0113
 77e:	30 91 14 01 	lds	r19, 0x0114
 782:	82 1b       	sub	r24, r18
 784:	93 0b       	sbc	r25, r19
 786:	90 93 01 01 	sts	0x0101, r25
 78a:	80 93 00 01 	sts	0x0100, r24
			ch6_state = 0;
 78e:	10 92 0d 01 	sts	0x010D, r1
		}
	}
}
 792:	9f 91       	pop	r25
 794:	8f 91       	pop	r24
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__subsf3>:
 7a8:	50 58       	subi	r21, 0x80	; 128

000007aa <__addsf3>:
 7aa:	bb 27       	eor	r27, r27
 7ac:	aa 27       	eor	r26, r26
 7ae:	0e d0       	rcall	.+28     	; 0x7cc <__addsf3x>
 7b0:	75 c1       	rjmp	.+746    	; 0xa9c <__fp_round>
 7b2:	66 d1       	rcall	.+716    	; 0xa80 <__fp_pscA>
 7b4:	30 f0       	brcs	.+12     	; 0x7c2 <__addsf3+0x18>
 7b6:	6b d1       	rcall	.+726    	; 0xa8e <__fp_pscB>
 7b8:	20 f0       	brcs	.+8      	; 0x7c2 <__addsf3+0x18>
 7ba:	31 f4       	brne	.+12     	; 0x7c8 <__addsf3+0x1e>
 7bc:	9f 3f       	cpi	r25, 0xFF	; 255
 7be:	11 f4       	brne	.+4      	; 0x7c4 <__addsf3+0x1a>
 7c0:	1e f4       	brtc	.+6      	; 0x7c8 <__addsf3+0x1e>
 7c2:	5b c1       	rjmp	.+694    	; 0xa7a <__fp_nan>
 7c4:	0e f4       	brtc	.+2      	; 0x7c8 <__addsf3+0x1e>
 7c6:	e0 95       	com	r30
 7c8:	e7 fb       	bst	r30, 7
 7ca:	51 c1       	rjmp	.+674    	; 0xa6e <__fp_inf>

000007cc <__addsf3x>:
 7cc:	e9 2f       	mov	r30, r25
 7ce:	77 d1       	rcall	.+750    	; 0xabe <__fp_split3>
 7d0:	80 f3       	brcs	.-32     	; 0x7b2 <__addsf3+0x8>
 7d2:	ba 17       	cp	r27, r26
 7d4:	62 07       	cpc	r22, r18
 7d6:	73 07       	cpc	r23, r19
 7d8:	84 07       	cpc	r24, r20
 7da:	95 07       	cpc	r25, r21
 7dc:	18 f0       	brcs	.+6      	; 0x7e4 <__addsf3x+0x18>
 7de:	71 f4       	brne	.+28     	; 0x7fc <__addsf3x+0x30>
 7e0:	9e f5       	brtc	.+102    	; 0x848 <__addsf3x+0x7c>
 7e2:	8f c1       	rjmp	.+798    	; 0xb02 <__fp_zero>
 7e4:	0e f4       	brtc	.+2      	; 0x7e8 <__addsf3x+0x1c>
 7e6:	e0 95       	com	r30
 7e8:	0b 2e       	mov	r0, r27
 7ea:	ba 2f       	mov	r27, r26
 7ec:	a0 2d       	mov	r26, r0
 7ee:	0b 01       	movw	r0, r22
 7f0:	b9 01       	movw	r22, r18
 7f2:	90 01       	movw	r18, r0
 7f4:	0c 01       	movw	r0, r24
 7f6:	ca 01       	movw	r24, r20
 7f8:	a0 01       	movw	r20, r0
 7fa:	11 24       	eor	r1, r1
 7fc:	ff 27       	eor	r31, r31
 7fe:	59 1b       	sub	r21, r25
 800:	99 f0       	breq	.+38     	; 0x828 <__addsf3x+0x5c>
 802:	59 3f       	cpi	r21, 0xF9	; 249
 804:	50 f4       	brcc	.+20     	; 0x81a <__addsf3x+0x4e>
 806:	50 3e       	cpi	r21, 0xE0	; 224
 808:	68 f1       	brcs	.+90     	; 0x864 <__addsf3x+0x98>
 80a:	1a 16       	cp	r1, r26
 80c:	f0 40       	sbci	r31, 0x00	; 0
 80e:	a2 2f       	mov	r26, r18
 810:	23 2f       	mov	r18, r19
 812:	34 2f       	mov	r19, r20
 814:	44 27       	eor	r20, r20
 816:	58 5f       	subi	r21, 0xF8	; 248
 818:	f3 cf       	rjmp	.-26     	; 0x800 <__addsf3x+0x34>
 81a:	46 95       	lsr	r20
 81c:	37 95       	ror	r19
 81e:	27 95       	ror	r18
 820:	a7 95       	ror	r26
 822:	f0 40       	sbci	r31, 0x00	; 0
 824:	53 95       	inc	r21
 826:	c9 f7       	brne	.-14     	; 0x81a <__addsf3x+0x4e>
 828:	7e f4       	brtc	.+30     	; 0x848 <__addsf3x+0x7c>
 82a:	1f 16       	cp	r1, r31
 82c:	ba 0b       	sbc	r27, r26
 82e:	62 0b       	sbc	r22, r18
 830:	73 0b       	sbc	r23, r19
 832:	84 0b       	sbc	r24, r20
 834:	ba f0       	brmi	.+46     	; 0x864 <__addsf3x+0x98>
 836:	91 50       	subi	r25, 0x01	; 1
 838:	a1 f0       	breq	.+40     	; 0x862 <__addsf3x+0x96>
 83a:	ff 0f       	add	r31, r31
 83c:	bb 1f       	adc	r27, r27
 83e:	66 1f       	adc	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	c2 f7       	brpl	.-16     	; 0x836 <__addsf3x+0x6a>
 846:	0e c0       	rjmp	.+28     	; 0x864 <__addsf3x+0x98>
 848:	ba 0f       	add	r27, r26
 84a:	62 1f       	adc	r22, r18
 84c:	73 1f       	adc	r23, r19
 84e:	84 1f       	adc	r24, r20
 850:	48 f4       	brcc	.+18     	; 0x864 <__addsf3x+0x98>
 852:	87 95       	ror	r24
 854:	77 95       	ror	r23
 856:	67 95       	ror	r22
 858:	b7 95       	ror	r27
 85a:	f7 95       	ror	r31
 85c:	9e 3f       	cpi	r25, 0xFE	; 254
 85e:	08 f0       	brcs	.+2      	; 0x862 <__addsf3x+0x96>
 860:	b3 cf       	rjmp	.-154    	; 0x7c8 <__addsf3+0x1e>
 862:	93 95       	inc	r25
 864:	88 0f       	add	r24, r24
 866:	08 f0       	brcs	.+2      	; 0x86a <__addsf3x+0x9e>
 868:	99 27       	eor	r25, r25
 86a:	ee 0f       	add	r30, r30
 86c:	97 95       	ror	r25
 86e:	87 95       	ror	r24
 870:	08 95       	ret

00000872 <__cmpsf2>:
 872:	d9 d0       	rcall	.+434    	; 0xa26 <__fp_cmp>
 874:	08 f4       	brcc	.+2      	; 0x878 <__cmpsf2+0x6>
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	08 95       	ret

0000087a <__divsf3>:
 87a:	0c d0       	rcall	.+24     	; 0x894 <__divsf3x>
 87c:	0f c1       	rjmp	.+542    	; 0xa9c <__fp_round>
 87e:	07 d1       	rcall	.+526    	; 0xa8e <__fp_pscB>
 880:	40 f0       	brcs	.+16     	; 0x892 <__divsf3+0x18>
 882:	fe d0       	rcall	.+508    	; 0xa80 <__fp_pscA>
 884:	30 f0       	brcs	.+12     	; 0x892 <__divsf3+0x18>
 886:	21 f4       	brne	.+8      	; 0x890 <__divsf3+0x16>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	19 f0       	breq	.+6      	; 0x892 <__divsf3+0x18>
 88c:	f0 c0       	rjmp	.+480    	; 0xa6e <__fp_inf>
 88e:	51 11       	cpse	r21, r1
 890:	39 c1       	rjmp	.+626    	; 0xb04 <__fp_szero>
 892:	f3 c0       	rjmp	.+486    	; 0xa7a <__fp_nan>

00000894 <__divsf3x>:
 894:	14 d1       	rcall	.+552    	; 0xabe <__fp_split3>
 896:	98 f3       	brcs	.-26     	; 0x87e <__divsf3+0x4>

00000898 <__divsf3_pse>:
 898:	99 23       	and	r25, r25
 89a:	c9 f3       	breq	.-14     	; 0x88e <__divsf3+0x14>
 89c:	55 23       	and	r21, r21
 89e:	b1 f3       	breq	.-20     	; 0x88c <__divsf3+0x12>
 8a0:	95 1b       	sub	r25, r21
 8a2:	55 0b       	sbc	r21, r21
 8a4:	bb 27       	eor	r27, r27
 8a6:	aa 27       	eor	r26, r26
 8a8:	62 17       	cp	r22, r18
 8aa:	73 07       	cpc	r23, r19
 8ac:	84 07       	cpc	r24, r20
 8ae:	38 f0       	brcs	.+14     	; 0x8be <__divsf3_pse+0x26>
 8b0:	9f 5f       	subi	r25, 0xFF	; 255
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	22 0f       	add	r18, r18
 8b6:	33 1f       	adc	r19, r19
 8b8:	44 1f       	adc	r20, r20
 8ba:	aa 1f       	adc	r26, r26
 8bc:	a9 f3       	breq	.-22     	; 0x8a8 <__divsf3_pse+0x10>
 8be:	33 d0       	rcall	.+102    	; 0x926 <__stack+0x27>
 8c0:	0e 2e       	mov	r0, r30
 8c2:	3a f0       	brmi	.+14     	; 0x8d2 <__divsf3_pse+0x3a>
 8c4:	e0 e8       	ldi	r30, 0x80	; 128
 8c6:	30 d0       	rcall	.+96     	; 0x928 <__stack+0x29>
 8c8:	91 50       	subi	r25, 0x01	; 1
 8ca:	50 40       	sbci	r21, 0x00	; 0
 8cc:	e6 95       	lsr	r30
 8ce:	00 1c       	adc	r0, r0
 8d0:	ca f7       	brpl	.-14     	; 0x8c4 <__divsf3_pse+0x2c>
 8d2:	29 d0       	rcall	.+82     	; 0x926 <__stack+0x27>
 8d4:	fe 2f       	mov	r31, r30
 8d6:	27 d0       	rcall	.+78     	; 0x926 <__stack+0x27>
 8d8:	66 0f       	add	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	bb 1f       	adc	r27, r27
 8e0:	26 17       	cp	r18, r22
 8e2:	37 07       	cpc	r19, r23
 8e4:	48 07       	cpc	r20, r24
 8e6:	ab 07       	cpc	r26, r27
 8e8:	b0 e8       	ldi	r27, 0x80	; 128
 8ea:	09 f0       	breq	.+2      	; 0x8ee <__divsf3_pse+0x56>
 8ec:	bb 0b       	sbc	r27, r27
 8ee:	80 2d       	mov	r24, r0
 8f0:	bf 01       	movw	r22, r30
 8f2:	ff 27       	eor	r31, r31
 8f4:	93 58       	subi	r25, 0x83	; 131
 8f6:	5f 4f       	sbci	r21, 0xFF	; 255
 8f8:	2a f0       	brmi	.+10     	; 0x904 <__stack+0x5>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	68 f0       	brcs	.+26     	; 0x91a <__stack+0x1b>
 900:	b6 c0       	rjmp	.+364    	; 0xa6e <__fp_inf>
 902:	00 c1       	rjmp	.+512    	; 0xb04 <__fp_szero>
 904:	5f 3f       	cpi	r21, 0xFF	; 255
 906:	ec f3       	brlt	.-6      	; 0x902 <__stack+0x3>
 908:	98 3e       	cpi	r25, 0xE8	; 232
 90a:	dc f3       	brlt	.-10     	; 0x902 <__stack+0x3>
 90c:	86 95       	lsr	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b7 95       	ror	r27
 914:	f7 95       	ror	r31
 916:	9f 5f       	subi	r25, 0xFF	; 255
 918:	c9 f7       	brne	.-14     	; 0x90c <__stack+0xd>
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret
 926:	e1 e0       	ldi	r30, 0x01	; 1
 928:	66 0f       	add	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	bb 1f       	adc	r27, r27
 930:	62 17       	cp	r22, r18
 932:	73 07       	cpc	r23, r19
 934:	84 07       	cpc	r24, r20
 936:	ba 07       	cpc	r27, r26
 938:	20 f0       	brcs	.+8      	; 0x942 <__stack+0x43>
 93a:	62 1b       	sub	r22, r18
 93c:	73 0b       	sbc	r23, r19
 93e:	84 0b       	sbc	r24, r20
 940:	ba 0b       	sbc	r27, r26
 942:	ee 1f       	adc	r30, r30
 944:	88 f7       	brcc	.-30     	; 0x928 <__stack+0x29>
 946:	e0 95       	com	r30
 948:	08 95       	ret

0000094a <__fixsfsi>:
 94a:	04 d0       	rcall	.+8      	; 0x954 <__fixunssfsi>
 94c:	68 94       	set
 94e:	b1 11       	cpse	r27, r1
 950:	d9 c0       	rjmp	.+434    	; 0xb04 <__fp_szero>
 952:	08 95       	ret

00000954 <__fixunssfsi>:
 954:	bc d0       	rcall	.+376    	; 0xace <__fp_splitA>
 956:	88 f0       	brcs	.+34     	; 0x97a <__fixunssfsi+0x26>
 958:	9f 57       	subi	r25, 0x7F	; 127
 95a:	90 f0       	brcs	.+36     	; 0x980 <__fixunssfsi+0x2c>
 95c:	b9 2f       	mov	r27, r25
 95e:	99 27       	eor	r25, r25
 960:	b7 51       	subi	r27, 0x17	; 23
 962:	a0 f0       	brcs	.+40     	; 0x98c <__fixunssfsi+0x38>
 964:	d1 f0       	breq	.+52     	; 0x99a <__fixunssfsi+0x46>
 966:	66 0f       	add	r22, r22
 968:	77 1f       	adc	r23, r23
 96a:	88 1f       	adc	r24, r24
 96c:	99 1f       	adc	r25, r25
 96e:	1a f0       	brmi	.+6      	; 0x976 <__fixunssfsi+0x22>
 970:	ba 95       	dec	r27
 972:	c9 f7       	brne	.-14     	; 0x966 <__fixunssfsi+0x12>
 974:	12 c0       	rjmp	.+36     	; 0x99a <__fixunssfsi+0x46>
 976:	b1 30       	cpi	r27, 0x01	; 1
 978:	81 f0       	breq	.+32     	; 0x99a <__fixunssfsi+0x46>
 97a:	c3 d0       	rcall	.+390    	; 0xb02 <__fp_zero>
 97c:	b1 e0       	ldi	r27, 0x01	; 1
 97e:	08 95       	ret
 980:	c0 c0       	rjmp	.+384    	; 0xb02 <__fp_zero>
 982:	67 2f       	mov	r22, r23
 984:	78 2f       	mov	r23, r24
 986:	88 27       	eor	r24, r24
 988:	b8 5f       	subi	r27, 0xF8	; 248
 98a:	39 f0       	breq	.+14     	; 0x99a <__fixunssfsi+0x46>
 98c:	b9 3f       	cpi	r27, 0xF9	; 249
 98e:	cc f3       	brlt	.-14     	; 0x982 <__fixunssfsi+0x2e>
 990:	86 95       	lsr	r24
 992:	77 95       	ror	r23
 994:	67 95       	ror	r22
 996:	b3 95       	inc	r27
 998:	d9 f7       	brne	.-10     	; 0x990 <__fixunssfsi+0x3c>
 99a:	3e f4       	brtc	.+14     	; 0x9aa <__fixunssfsi+0x56>
 99c:	90 95       	com	r25
 99e:	80 95       	com	r24
 9a0:	70 95       	com	r23
 9a2:	61 95       	neg	r22
 9a4:	7f 4f       	sbci	r23, 0xFF	; 255
 9a6:	8f 4f       	sbci	r24, 0xFF	; 255
 9a8:	9f 4f       	sbci	r25, 0xFF	; 255
 9aa:	08 95       	ret

000009ac <__floatunsisf>:
 9ac:	e8 94       	clt
 9ae:	09 c0       	rjmp	.+18     	; 0x9c2 <__floatsisf+0x12>

000009b0 <__floatsisf>:
 9b0:	97 fb       	bst	r25, 7
 9b2:	3e f4       	brtc	.+14     	; 0x9c2 <__floatsisf+0x12>
 9b4:	90 95       	com	r25
 9b6:	80 95       	com	r24
 9b8:	70 95       	com	r23
 9ba:	61 95       	neg	r22
 9bc:	7f 4f       	sbci	r23, 0xFF	; 255
 9be:	8f 4f       	sbci	r24, 0xFF	; 255
 9c0:	9f 4f       	sbci	r25, 0xFF	; 255
 9c2:	99 23       	and	r25, r25
 9c4:	a9 f0       	breq	.+42     	; 0x9f0 <__floatsisf+0x40>
 9c6:	f9 2f       	mov	r31, r25
 9c8:	96 e9       	ldi	r25, 0x96	; 150
 9ca:	bb 27       	eor	r27, r27
 9cc:	93 95       	inc	r25
 9ce:	f6 95       	lsr	r31
 9d0:	87 95       	ror	r24
 9d2:	77 95       	ror	r23
 9d4:	67 95       	ror	r22
 9d6:	b7 95       	ror	r27
 9d8:	f1 11       	cpse	r31, r1
 9da:	f8 cf       	rjmp	.-16     	; 0x9cc <__floatsisf+0x1c>
 9dc:	fa f4       	brpl	.+62     	; 0xa1c <__floatsisf+0x6c>
 9de:	bb 0f       	add	r27, r27
 9e0:	11 f4       	brne	.+4      	; 0x9e6 <__floatsisf+0x36>
 9e2:	60 ff       	sbrs	r22, 0
 9e4:	1b c0       	rjmp	.+54     	; 0xa1c <__floatsisf+0x6c>
 9e6:	6f 5f       	subi	r22, 0xFF	; 255
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	8f 4f       	sbci	r24, 0xFF	; 255
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	16 c0       	rjmp	.+44     	; 0xa1c <__floatsisf+0x6c>
 9f0:	88 23       	and	r24, r24
 9f2:	11 f0       	breq	.+4      	; 0x9f8 <__floatsisf+0x48>
 9f4:	96 e9       	ldi	r25, 0x96	; 150
 9f6:	11 c0       	rjmp	.+34     	; 0xa1a <__floatsisf+0x6a>
 9f8:	77 23       	and	r23, r23
 9fa:	21 f0       	breq	.+8      	; 0xa04 <__floatsisf+0x54>
 9fc:	9e e8       	ldi	r25, 0x8E	; 142
 9fe:	87 2f       	mov	r24, r23
 a00:	76 2f       	mov	r23, r22
 a02:	05 c0       	rjmp	.+10     	; 0xa0e <__floatsisf+0x5e>
 a04:	66 23       	and	r22, r22
 a06:	71 f0       	breq	.+28     	; 0xa24 <__floatsisf+0x74>
 a08:	96 e8       	ldi	r25, 0x86	; 134
 a0a:	86 2f       	mov	r24, r22
 a0c:	70 e0       	ldi	r23, 0x00	; 0
 a0e:	60 e0       	ldi	r22, 0x00	; 0
 a10:	2a f0       	brmi	.+10     	; 0xa1c <__floatsisf+0x6c>
 a12:	9a 95       	dec	r25
 a14:	66 0f       	add	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	da f7       	brpl	.-10     	; 0xa12 <__floatsisf+0x62>
 a1c:	88 0f       	add	r24, r24
 a1e:	96 95       	lsr	r25
 a20:	87 95       	ror	r24
 a22:	97 f9       	bld	r25, 7
 a24:	08 95       	ret

00000a26 <__fp_cmp>:
 a26:	99 0f       	add	r25, r25
 a28:	00 08       	sbc	r0, r0
 a2a:	55 0f       	add	r21, r21
 a2c:	aa 0b       	sbc	r26, r26
 a2e:	e0 e8       	ldi	r30, 0x80	; 128
 a30:	fe ef       	ldi	r31, 0xFE	; 254
 a32:	16 16       	cp	r1, r22
 a34:	17 06       	cpc	r1, r23
 a36:	e8 07       	cpc	r30, r24
 a38:	f9 07       	cpc	r31, r25
 a3a:	c0 f0       	brcs	.+48     	; 0xa6c <__fp_cmp+0x46>
 a3c:	12 16       	cp	r1, r18
 a3e:	13 06       	cpc	r1, r19
 a40:	e4 07       	cpc	r30, r20
 a42:	f5 07       	cpc	r31, r21
 a44:	98 f0       	brcs	.+38     	; 0xa6c <__fp_cmp+0x46>
 a46:	62 1b       	sub	r22, r18
 a48:	73 0b       	sbc	r23, r19
 a4a:	84 0b       	sbc	r24, r20
 a4c:	95 0b       	sbc	r25, r21
 a4e:	39 f4       	brne	.+14     	; 0xa5e <__fp_cmp+0x38>
 a50:	0a 26       	eor	r0, r26
 a52:	61 f0       	breq	.+24     	; 0xa6c <__fp_cmp+0x46>
 a54:	23 2b       	or	r18, r19
 a56:	24 2b       	or	r18, r20
 a58:	25 2b       	or	r18, r21
 a5a:	21 f4       	brne	.+8      	; 0xa64 <__fp_cmp+0x3e>
 a5c:	08 95       	ret
 a5e:	0a 26       	eor	r0, r26
 a60:	09 f4       	brne	.+2      	; 0xa64 <__fp_cmp+0x3e>
 a62:	a1 40       	sbci	r26, 0x01	; 1
 a64:	a6 95       	lsr	r26
 a66:	8f ef       	ldi	r24, 0xFF	; 255
 a68:	81 1d       	adc	r24, r1
 a6a:	81 1d       	adc	r24, r1
 a6c:	08 95       	ret

00000a6e <__fp_inf>:
 a6e:	97 f9       	bld	r25, 7
 a70:	9f 67       	ori	r25, 0x7F	; 127
 a72:	80 e8       	ldi	r24, 0x80	; 128
 a74:	70 e0       	ldi	r23, 0x00	; 0
 a76:	60 e0       	ldi	r22, 0x00	; 0
 a78:	08 95       	ret

00000a7a <__fp_nan>:
 a7a:	9f ef       	ldi	r25, 0xFF	; 255
 a7c:	80 ec       	ldi	r24, 0xC0	; 192
 a7e:	08 95       	ret

00000a80 <__fp_pscA>:
 a80:	00 24       	eor	r0, r0
 a82:	0a 94       	dec	r0
 a84:	16 16       	cp	r1, r22
 a86:	17 06       	cpc	r1, r23
 a88:	18 06       	cpc	r1, r24
 a8a:	09 06       	cpc	r0, r25
 a8c:	08 95       	ret

00000a8e <__fp_pscB>:
 a8e:	00 24       	eor	r0, r0
 a90:	0a 94       	dec	r0
 a92:	12 16       	cp	r1, r18
 a94:	13 06       	cpc	r1, r19
 a96:	14 06       	cpc	r1, r20
 a98:	05 06       	cpc	r0, r21
 a9a:	08 95       	ret

00000a9c <__fp_round>:
 a9c:	09 2e       	mov	r0, r25
 a9e:	03 94       	inc	r0
 aa0:	00 0c       	add	r0, r0
 aa2:	11 f4       	brne	.+4      	; 0xaa8 <__fp_round+0xc>
 aa4:	88 23       	and	r24, r24
 aa6:	52 f0       	brmi	.+20     	; 0xabc <__fp_round+0x20>
 aa8:	bb 0f       	add	r27, r27
 aaa:	40 f4       	brcc	.+16     	; 0xabc <__fp_round+0x20>
 aac:	bf 2b       	or	r27, r31
 aae:	11 f4       	brne	.+4      	; 0xab4 <__fp_round+0x18>
 ab0:	60 ff       	sbrs	r22, 0
 ab2:	04 c0       	rjmp	.+8      	; 0xabc <__fp_round+0x20>
 ab4:	6f 5f       	subi	r22, 0xFF	; 255
 ab6:	7f 4f       	sbci	r23, 0xFF	; 255
 ab8:	8f 4f       	sbci	r24, 0xFF	; 255
 aba:	9f 4f       	sbci	r25, 0xFF	; 255
 abc:	08 95       	ret

00000abe <__fp_split3>:
 abe:	57 fd       	sbrc	r21, 7
 ac0:	90 58       	subi	r25, 0x80	; 128
 ac2:	44 0f       	add	r20, r20
 ac4:	55 1f       	adc	r21, r21
 ac6:	59 f0       	breq	.+22     	; 0xade <__fp_splitA+0x10>
 ac8:	5f 3f       	cpi	r21, 0xFF	; 255
 aca:	71 f0       	breq	.+28     	; 0xae8 <__fp_splitA+0x1a>
 acc:	47 95       	ror	r20

00000ace <__fp_splitA>:
 ace:	88 0f       	add	r24, r24
 ad0:	97 fb       	bst	r25, 7
 ad2:	99 1f       	adc	r25, r25
 ad4:	61 f0       	breq	.+24     	; 0xaee <__fp_splitA+0x20>
 ad6:	9f 3f       	cpi	r25, 0xFF	; 255
 ad8:	79 f0       	breq	.+30     	; 0xaf8 <__fp_splitA+0x2a>
 ada:	87 95       	ror	r24
 adc:	08 95       	ret
 ade:	12 16       	cp	r1, r18
 ae0:	13 06       	cpc	r1, r19
 ae2:	14 06       	cpc	r1, r20
 ae4:	55 1f       	adc	r21, r21
 ae6:	f2 cf       	rjmp	.-28     	; 0xacc <__fp_split3+0xe>
 ae8:	46 95       	lsr	r20
 aea:	f1 df       	rcall	.-30     	; 0xace <__fp_splitA>
 aec:	08 c0       	rjmp	.+16     	; 0xafe <__fp_splitA+0x30>
 aee:	16 16       	cp	r1, r22
 af0:	17 06       	cpc	r1, r23
 af2:	18 06       	cpc	r1, r24
 af4:	99 1f       	adc	r25, r25
 af6:	f1 cf       	rjmp	.-30     	; 0xada <__fp_splitA+0xc>
 af8:	86 95       	lsr	r24
 afa:	71 05       	cpc	r23, r1
 afc:	61 05       	cpc	r22, r1
 afe:	08 94       	sec
 b00:	08 95       	ret

00000b02 <__fp_zero>:
 b02:	e8 94       	clt

00000b04 <__fp_szero>:
 b04:	bb 27       	eor	r27, r27
 b06:	66 27       	eor	r22, r22
 b08:	77 27       	eor	r23, r23
 b0a:	cb 01       	movw	r24, r22
 b0c:	97 f9       	bld	r25, 7
 b0e:	08 95       	ret

00000b10 <__gesf2>:
 b10:	8a df       	rcall	.-236    	; 0xa26 <__fp_cmp>
 b12:	08 f4       	brcc	.+2      	; 0xb16 <__gesf2+0x6>
 b14:	8f ef       	ldi	r24, 0xFF	; 255
 b16:	08 95       	ret

00000b18 <__mulsf3>:
 b18:	0b d0       	rcall	.+22     	; 0xb30 <__mulsf3x>
 b1a:	c0 cf       	rjmp	.-128    	; 0xa9c <__fp_round>
 b1c:	b1 df       	rcall	.-158    	; 0xa80 <__fp_pscA>
 b1e:	28 f0       	brcs	.+10     	; 0xb2a <__mulsf3+0x12>
 b20:	b6 df       	rcall	.-148    	; 0xa8e <__fp_pscB>
 b22:	18 f0       	brcs	.+6      	; 0xb2a <__mulsf3+0x12>
 b24:	95 23       	and	r25, r21
 b26:	09 f0       	breq	.+2      	; 0xb2a <__mulsf3+0x12>
 b28:	a2 cf       	rjmp	.-188    	; 0xa6e <__fp_inf>
 b2a:	a7 cf       	rjmp	.-178    	; 0xa7a <__fp_nan>
 b2c:	11 24       	eor	r1, r1
 b2e:	ea cf       	rjmp	.-44     	; 0xb04 <__fp_szero>

00000b30 <__mulsf3x>:
 b30:	c6 df       	rcall	.-116    	; 0xabe <__fp_split3>
 b32:	a0 f3       	brcs	.-24     	; 0xb1c <__mulsf3+0x4>

00000b34 <__mulsf3_pse>:
 b34:	95 9f       	mul	r25, r21
 b36:	d1 f3       	breq	.-12     	; 0xb2c <__mulsf3+0x14>
 b38:	95 0f       	add	r25, r21
 b3a:	50 e0       	ldi	r21, 0x00	; 0
 b3c:	55 1f       	adc	r21, r21
 b3e:	62 9f       	mul	r22, r18
 b40:	f0 01       	movw	r30, r0
 b42:	72 9f       	mul	r23, r18
 b44:	bb 27       	eor	r27, r27
 b46:	f0 0d       	add	r31, r0
 b48:	b1 1d       	adc	r27, r1
 b4a:	63 9f       	mul	r22, r19
 b4c:	aa 27       	eor	r26, r26
 b4e:	f0 0d       	add	r31, r0
 b50:	b1 1d       	adc	r27, r1
 b52:	aa 1f       	adc	r26, r26
 b54:	64 9f       	mul	r22, r20
 b56:	66 27       	eor	r22, r22
 b58:	b0 0d       	add	r27, r0
 b5a:	a1 1d       	adc	r26, r1
 b5c:	66 1f       	adc	r22, r22
 b5e:	82 9f       	mul	r24, r18
 b60:	22 27       	eor	r18, r18
 b62:	b0 0d       	add	r27, r0
 b64:	a1 1d       	adc	r26, r1
 b66:	62 1f       	adc	r22, r18
 b68:	73 9f       	mul	r23, r19
 b6a:	b0 0d       	add	r27, r0
 b6c:	a1 1d       	adc	r26, r1
 b6e:	62 1f       	adc	r22, r18
 b70:	83 9f       	mul	r24, r19
 b72:	a0 0d       	add	r26, r0
 b74:	61 1d       	adc	r22, r1
 b76:	22 1f       	adc	r18, r18
 b78:	74 9f       	mul	r23, r20
 b7a:	33 27       	eor	r19, r19
 b7c:	a0 0d       	add	r26, r0
 b7e:	61 1d       	adc	r22, r1
 b80:	23 1f       	adc	r18, r19
 b82:	84 9f       	mul	r24, r20
 b84:	60 0d       	add	r22, r0
 b86:	21 1d       	adc	r18, r1
 b88:	82 2f       	mov	r24, r18
 b8a:	76 2f       	mov	r23, r22
 b8c:	6a 2f       	mov	r22, r26
 b8e:	11 24       	eor	r1, r1
 b90:	9f 57       	subi	r25, 0x7F	; 127
 b92:	50 40       	sbci	r21, 0x00	; 0
 b94:	8a f0       	brmi	.+34     	; 0xbb8 <__mulsf3_pse+0x84>
 b96:	e1 f0       	breq	.+56     	; 0xbd0 <__mulsf3_pse+0x9c>
 b98:	88 23       	and	r24, r24
 b9a:	4a f0       	brmi	.+18     	; 0xbae <__mulsf3_pse+0x7a>
 b9c:	ee 0f       	add	r30, r30
 b9e:	ff 1f       	adc	r31, r31
 ba0:	bb 1f       	adc	r27, r27
 ba2:	66 1f       	adc	r22, r22
 ba4:	77 1f       	adc	r23, r23
 ba6:	88 1f       	adc	r24, r24
 ba8:	91 50       	subi	r25, 0x01	; 1
 baa:	50 40       	sbci	r21, 0x00	; 0
 bac:	a9 f7       	brne	.-22     	; 0xb98 <__mulsf3_pse+0x64>
 bae:	9e 3f       	cpi	r25, 0xFE	; 254
 bb0:	51 05       	cpc	r21, r1
 bb2:	70 f0       	brcs	.+28     	; 0xbd0 <__mulsf3_pse+0x9c>
 bb4:	5c cf       	rjmp	.-328    	; 0xa6e <__fp_inf>
 bb6:	a6 cf       	rjmp	.-180    	; 0xb04 <__fp_szero>
 bb8:	5f 3f       	cpi	r21, 0xFF	; 255
 bba:	ec f3       	brlt	.-6      	; 0xbb6 <__mulsf3_pse+0x82>
 bbc:	98 3e       	cpi	r25, 0xE8	; 232
 bbe:	dc f3       	brlt	.-10     	; 0xbb6 <__mulsf3_pse+0x82>
 bc0:	86 95       	lsr	r24
 bc2:	77 95       	ror	r23
 bc4:	67 95       	ror	r22
 bc6:	b7 95       	ror	r27
 bc8:	f7 95       	ror	r31
 bca:	e7 95       	ror	r30
 bcc:	9f 5f       	subi	r25, 0xFF	; 255
 bce:	c1 f7       	brne	.-16     	; 0xbc0 <__mulsf3_pse+0x8c>
 bd0:	fe 2b       	or	r31, r30
 bd2:	88 0f       	add	r24, r24
 bd4:	91 1d       	adc	r25, r1
 bd6:	96 95       	lsr	r25
 bd8:	87 95       	ror	r24
 bda:	97 f9       	bld	r25, 7
 bdc:	08 95       	ret

00000bde <__umulhisi3>:
 bde:	a2 9f       	mul	r26, r18
 be0:	b0 01       	movw	r22, r0
 be2:	b3 9f       	mul	r27, r19
 be4:	c0 01       	movw	r24, r0
 be6:	a3 9f       	mul	r26, r19
 be8:	70 0d       	add	r23, r0
 bea:	81 1d       	adc	r24, r1
 bec:	11 24       	eor	r1, r1
 bee:	91 1d       	adc	r25, r1
 bf0:	b2 9f       	mul	r27, r18
 bf2:	70 0d       	add	r23, r0
 bf4:	81 1d       	adc	r24, r1
 bf6:	11 24       	eor	r1, r1
 bf8:	91 1d       	adc	r25, r1
 bfa:	08 95       	ret

00000bfc <_exit>:
 bfc:	f8 94       	cli

00000bfe <__stop_program>:
 bfe:	ff cf       	rjmp	.-2      	; 0xbfe <__stop_program>
